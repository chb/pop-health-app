{"version":3,"sources":["components/Header/logo.png","components/LoginPage/logo.svg","store/dataSources.js","store/ui.js","http.js","store/auth.js","store/payers.js","config.js","store/measureResults.js","store/index.js","store/organizations.js","store/measures.js","components/Header/index.jsx","components/Checkbox/index.jsx","components/DataSourceSelector/index.jsx","components/Sidebar/index.jsx","components/SQLEditor/index.jsx","components/DataGrid/index.jsx","components/Chart/index.jsx","components/ReportSummary/index.jsx","components/ReportPage/index.jsx","components/TimelineGrid/index.jsx","components/LineChart/index.jsx","components/MeasuresPage/index.jsx","components/LoginPage/index.jsx","components/App/index.jsx","App.js","index.js"],"names":["module","exports","TOGGLE","LOAD","MERGE","countSelected","state","selectedCount","id","enabled","INITIAL_STATE","sqlEditor","height","options","value","language","lineNumbers","scrollBeyondLastLine","automaticLayout","emptySelectionClipboard","folding","fontFamily","fontSize","glyphMargin","lineHeight","mouseWheelZoom","renderLineHighlight","minimap","renderCharacters","window","location","fetch","backendUrl","URL","protocol","process","http","uri","url","href","mode","credentials","then","res","ok","error","Error","status","statusText","Object","defineProperty","json","login","username","password","body","URLSearchParams","set","method","logout","query","sql","data","append","request","$","jQuery","loading","currentUser","JSON","parse","sessionStorage","SET_LOADING","setLoading","payload","type","merge","SET_ERROR","SET_DATA","getQueryUri","org","ds","q","cfg","keys","organizations","map","dataSources","selected","has","sync","searchParams","get","history","replaceState","delete","qs","toString","queryMeasures","dispatch","getState","middleWares","thunk","store","createStore","combineReducers","auth","action","extend","ui","newState","forEach","rec","measures","payers","nextState","measureResults","applyMiddleware","loadOrganizations","loadPayers","loadMeasures","oldState","payerId","find","ds_id","loadDataSources","catch","console","Header","className","NavLink","to","src","logo","alt","this","props","user","Route","path","render","onClick","e","preventDefault","removeItem","style","color","React","Component","Checkbox","iconClass","radio","checked","disabled","onChange","label","Sidebar","toggleDataSource","toggleOrg","ehr","filter","o","key","title","description","length","meta","connect","name","require","config","paths","vs","SQLEditor","editor","dispose","monaco","editorNode","create","$window","$editor","divider","on","startEvent","startY","clientY","css","overflow","onHeightChange","outerHeight","off","moveEvent","ref","node","onQuery","getValue","defaultProps","RemoteDataGrid","input","pad","btoa","replace","buildCsvUrl","download","cols","header","rows","DataGrid","wrapper","createRef","syncHeader","current","headerCells","querySelectorAll","td","i","width","Math","floor","clientWidth","tabIndex","y","Chart","numerator","denominator","setState","animating","animate","duration","easing","step","now","tween","prop","complete","percent","max","min","largeArcFlag","cos","PI","sin","getCoordinatesForPercent","x","viewBox","round","cx","cy","r","transform","d","ReportSummary","date","clinic","measureName","numeratorValue","denominatorValue","measureDescription","numeratorDescription","denominatorDescription","moment","format","ReportPage","timer","start","Date","tick","prestoLoading","queryTime","setTimeout","dsKeys","search","cohort_sql","runQuery","startClock","resp","prestoError","prestoData","err","loadData","prevProps","prevDataSources","dsId","h","marginTop","textAlign","ms","out","n","reduce","prev","cur","chunk","push","pop","last","join","formatDuration","measureDate","startValue","message","margin","exact","role","pathname","createSummaryRenderer","renderEditor","undefined","TimelineGrid","bodyRows","measure","cells","entry","dateObject","pct","isSame","Link","newDate","add","selectedOrgId","orgId","selectedMeasureId","target","nodeName","onRowClick","startYear","contextTypes","router","PropTypes","object","Highcharts","LineChart","chart","plotBackgroundColor","plotBorderColor","plotBorderWidth","zoomType","align","fontWeight","useHTML","subtitle","xAxis","lineWidth","crosshair","showEmpty","categories","text","minorTicks","zoomEnabled","utc","startOf","endOf","dateTimeLabelFormats","day","yAxis","lineColor","tickInterval","tooltip","crossHairs","shared","headerFormat","pointFormat","footerFormat","valueDecimals","plotOptions","spline","states","hover","marker","series","shadow","fillColor","linearGradient","x1","x2","y1","y2","stops","setOpacity","dashStyle","navigation","menuItemStyle","legend","verticalAlign","layout","floating","update","chartOptions","drillUp","MeasuresPage","selection","bind","loadDataIfNeeded","measureId","shift","orgData","split","year","month","point","parseInt","String","stack","getSelection","reports","msr","getChartOptions","renderStage","LoginPage","email","onSubmit","from","Redirect","htmlFor","placeholder","pass","stringify","PrivateRoute","component","rest","CPR","App","BrowserRouter","Root","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.858c9ae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.21f34708.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bb973869.svg\";","const TOGGLE = \"actions:dataSources:toggle\";\nconst LOAD   = \"actions:dataSources:loadData\";\nconst MERGE  = \"actions:dataSources:merge\";\n\nfunction countSelected(state) {\n    let selectedCount = 0;\n    for (const id in state) {\n        if (state[id].enabled) {\n            selectedCount += 1;\n        }\n    }\n    return selectedCount;\n}\n\nexport function toggleDataSource(id)\n{\n    return { type: TOGGLE, payload: id };\n}\n\nexport function load(data)\n{\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const newState = {};\n\n        data.forEach(rec => {\n            let enabled = !!rec.enabled;\n            let selected = !!rec.selected;\n\n            if (rec.type === \"claims\") {\n                enabled = false;\n                const payerId = Object.keys(oldState.payers).find(\n                    id => oldState.payers[id].ds_id === rec.id\n                );\n\n                if (!payerId || oldState.payers[payerId].selected) {\n                    selected = true;\n                }\n            }\n\n            newState[rec.id] = {\n                ...rec,\n                selected,\n                enabled\n            };\n        });\n        dispatch({ type: LOAD, payload: newState });\n    };\n}\n\nexport function toggle(id, on) {\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const selectedCount = countSelected(oldState);\n\n        // If we only have one item selected, an \"unselect request\" must be ignored\n        if (selectedCount <= 1 && !on) {\n            return;\n        }\n\n        dispatch({\n            type: MERGE,\n            payload: {\n                [id]: {\n                    selected: !!on\n                }\n            }\n        });\n    };\n}\n\nexport function selectClaimsDataSource(id) {\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const newState = { ...oldState.dataSources };\n\n        for (const key in newState) {\n            if (newState[key].type === \"claims\") {\n                newState[key].selected = key === id;\n            }\n        }\n\n        dispatch({ type: MERGE, payload: newState });\n    };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n\n    case TOGGLE: {\n        const selectedCount = countSelected(state);\n        if (selectedCount <= 1 && state[action.payload].selected) {\n            return state;\n        }\n        return {\n            ...state,\n            [action.payload]: {\n                ...state[action.payload],\n                selected: !state[action.payload].selected\n            }\n        };\n    }\n\n    case LOAD:\n        return { ...action.payload };\n\n    case MERGE:\n        // @ts-ignore\n        return window.jQuery.extend(true, state, action.payload);\n\n    default:\n        return state;\n    }\n}\n","const INITIAL_STATE = {\n    sqlEditor: {\n        height: 200,\n        options: {\n            value: \"\",\n            language: \"sql\",\n            lineNumbers: \"on\",\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            emptySelectionClipboard: false,\n            folding: true,\n            fontFamily: \"Menlo, monospace\",\n            fontSize: 13,\n            glyphMargin: true,\n            lineHeight: 16,\n            mouseWheelZoom: true,\n            renderLineHighlight: \"all\",\n            minimap: {\n                enabled: false,\n                renderCharacters: false\n            }\n        }\n    }\n};\n\nconst SET_EDITOR_HEIGHT = \"actions:ui:sql-editor:setHeight\";\n\nexport function setEditorHeight(height)\n{\n    return { type: SET_EDITOR_HEIGHT, payload: height };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case SET_EDITOR_HEIGHT:\n        return {\n            ...state,\n            sqlEditor: {\n                ...state.sqlEditor,\n                height: action.payload\n            }\n        };\n    default:\n        return state;\n    }\n}","// This file contains the functions for communication with the backend.\n\nconst { location, fetch } = window;\n\nconst backendUrl = new URL(\n    `${location.protocol}//${process.env.REACT_APP_BACKEND_HOST}${process.env.REACT_APP_BACKEND_PATH}`\n);\n\nfunction http(uri, options) {\n    const url = new URL(uri, backendUrl);\n    return fetch(url.href, {\n        mode: \"cors\",\n        credentials: \"include\",\n        ...options\n    })\n    .then(res => {\n        if (!res.ok) {\n            const error = new Error(`${res.status} ${res.statusText}`);\n            Object.defineProperty(error, \"data\", {\n                value: {\n                    status    : res.status,\n                    statusText: res.statusText\n                }\n            });\n            throw error;\n        }\n        return res;\n    })\n    .then(res => res.json())\n    .then(res => {\n        if (res.error) {\n            throw new Error(res.error);\n        }\n        return res;\n    });\n}\n\nexport function login(username, password) {\n    const body = new URLSearchParams();\n    body.set(\"username\", username);\n    body.set(\"password\", password);\n    return http(\"auth/login\", { method: \"POST\", body });\n}\n\nexport function logout() {\n    return http(\"auth/logout\");\n}\n\nexport function query(sql) {\n    const data = new URLSearchParams();\n    data.append(\"query\", sql);\n    return http(\"sql\", {\n        method: \"POST\",\n        body: data\n    });\n}\n\nexport default {\n    login,\n    logout,\n    query,\n    request: http\n};\n","import http from \"../http\";\n\n// @ts-ignore\nconst $ = window.jQuery;\n\nconst INITIAL_STATE = {\n    loading: false,\n    error: null,\n    currentUser: JSON.parse(sessionStorage.currentUser || \"null\")\n};\n\nconst MERGE       = \"actions:auth:merge\";\nconst SET_LOADING = \"actions:auth:setLoading\";\n\nexport function setLoading(payload)\n{\n    return { type: SET_LOADING, payload };\n}\n\nexport function merge(payload)\n{\n    return { type: MERGE, payload };\n}\n\nexport function login(email, password)\n{\n    return function (dispatch)\n    {\n        dispatch(setLoading(true));\n        return http.login(email, password).then(user => {\n            sessionStorage.currentUser = JSON.stringify(user);\n            dispatch(merge({\n                currentUser: user,\n                error: null,\n                loading: false\n            }));\n        }).catch(error => {\n            console.error(error);\n            dispatch(merge({ error, loading: false }));\n        });\n    };\n}\n\nexport function logout()\n{\n    return function (dispatch)\n    {\n        dispatch(setLoading(true));\n        return http.logout().then(() => {\n            sessionStorage.removeItem(\"currentUser\");\n            dispatch(merge({\n                currentUser: null,\n                error: null,\n                loading: false\n            }));\n        });\n    };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case MERGE:\n        return $.extend(true, {}, state, action.payload);\n    case SET_LOADING:\n        return { ...state, loading: !!action.payload };\n    default:\n        return state;\n    }\n}\n","import { selectClaimsDataSource } from \"./dataSources\";\n\nconst TOGGLE = \"actions:payers:toggle\";\nconst LOAD   = \"actions:payers:loadData\";\n\nexport function toggle(id) {\n    return function(dispatch, getState) {\n\n        const oldState = getState();\n        const payer = oldState.payers[id];\n        const correspondingClaimsDataSourceId = payer.ds_id;\n\n        if (!payer.selected) {\n            dispatch(selectClaimsDataSource(correspondingClaimsDataSourceId));\n        }\n        dispatch({ type: TOGGLE, payload: id });\n    };\n}\n\nexport function load(data) {\n    return function(dispatch) {\n        dispatch({ type: LOAD, payload: data });\n    };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case TOGGLE: {\n        const nextState = {};\n        for (const id in state) {\n            nextState[id] = {\n                ...state[id],\n                selected: id === action.payload ? !state[action.payload].selected : false\n            };\n        }\n        return nextState;\n    }\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","export default {\n    startYear  : 2016\n};\n","import http from \"../http\";\nimport cfg  from \"../config\";\n\n\nconst INITIAL_STATE = {\n    loading: false,\n    error  : null,\n    data   : null,\n    uri    : \"\"\n};\n\nconst SET_LOADING = \"actions:measureResults:setLoading\";\nconst SET_ERROR   = \"actions:measureResults:setError\";\nconst SET_DATA    = \"actions:measureResults:setData\";\nconst MERGE       = \"actions:measureResults:merge\";\n\n/**\n * Compile and return the uri that will be used to query the measure results.\n * If any of the needed variables are missing (E.g. not available yet), it\n * will return null.\n * @param {Object} state\n * @param {Object} [options]\n * @param {string} [options.org] Organization ID\n * @param {string} [options.ds] Dataset ID\n */\nexport function getQueryUri(state, { org, ds } = {})\n{\n    let q = new URLSearchParams();\n\n    // Two year time range based on the startYear config -----------------------\n    q.append(\"startDate\", `${cfg.startYear    }-01-01`);\n    q.append(\"endDate\"  , `${cfg.startYear + 1}-12-31`);\n\n    // organizations -----------------------------------------------------------\n    if (org) {\n        q.append(\"org\", org);\n    } else {\n        Object.keys(state.organizations).map(id => {\n            if (state.organizations[id].enabled) q.append(\"org\", id);\n            return true;\n        });\n    }\n\n    // Data Sources ------------------------------------------------------------\n    if (ds) {\n        q.append(\"ds\", ds);\n    } else {\n        Object.keys(state.dataSources).map(id => {\n            if (state.dataSources[id].selected) q.append(\"ds\", id);\n            return true;\n        });\n    }\n\n    // data source is required\n    if (!q.has(\"ds\")) {\n        return null;\n    }\n\n    // If \"sync\" is added to the current window location, pass it through to the\n    // back-end to tell it to sync the data.\n    const url  = new URL(window.location.href);\n    const sync = url.searchParams.get(\"sync\");\n\n    if (sync) {\n        q.append(\"sync\", sync);\n\n        // Also make sure we remove \"sync\" from the URL after we have used it!\n        if (window.history.replaceState) {\n            url.searchParams.delete(\"sync\");\n            window.history.replaceState({}, \"\", url.href);\n        }\n    }\n\n    const qs = q.toString();\n\n    if (!qs) {\n        return null;\n    }\n\n    return \"api/measure/result?\" + qs;\n}\n\nexport function queryMeasures(options = {})\n{\n    return function(dispatch, getState) {\n        const state = getState();\n        const uri   = getQueryUri(state, options);\n        if (uri && uri !== state.uri) {\n            dispatch(merge({ uri, loading: true }));\n            http.request(uri).then(\n                data  => dispatch(merge({  data, loading: false })),\n                error => dispatch(merge({ error, loading: false }))\n            );\n        }\n    };\n}\n\nexport function setLoading(isLoading)\n{\n    return { type: SET_LOADING, payload: !!isLoading };\n}\n\nexport function setError(error)\n{\n    return { type: SET_ERROR, payload: error };\n}\n\nexport function setData(data)\n{\n    return { type: SET_DATA, payload: data };\n}\n\nexport function merge(payload)\n{\n    return { type: MERGE, payload };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case SET_LOADING:\n        return { ...state, loading: !!action.payload };\n    case SET_ERROR:\n        return { ...state, error: action.payload };\n    case SET_DATA:\n        return { ...state, data: action.payload };\n    case MERGE:\n        return { ...state, ...action.payload };\n    default:\n        return state;\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk          from \"redux-thunk\";\nimport dataSources    from \"./dataSources\";\nimport ui             from \"./ui\";\nimport auth           from \"./auth\";\nimport organizations  from \"./organizations\";\nimport measures       from \"./measures\";\nimport payers         from \"./payers\";\nimport measureResults from \"./measureResults\";\nimport http           from \"../http\";\n\nimport { load as loadOrganizations } from \"./organizations\";\nimport { load as loadPayers        } from \"./payers\";\nimport { load as loadMeasures      } from \"./measures\";\nimport { load as loadDataSources   } from \"./dataSources\";\n\nconst middleWares = [ thunk ];\n\n// Create logger middleware that will log all redux action but only use that in development.\nif (process.env.NODE_ENV === \"development\" && console && console.groupCollapsed) {\n    let logger = _store => {\n        return next => {\n            return action => {\n                let result;\n                if (!action.__no_log) {\n                    console.groupCollapsed(action.type);\n                    console.info(\"dispatching\", action);\n                    result = next(action);\n                    console.log(\"next state\", _store.getState());\n                    console.groupEnd();\n                }\n                else {\n                    result = next(action);\n                }\n                return result;\n            };\n        };\n    };\n\n    // @ts-ignore\n    middleWares.push(logger);\n}\n\n\nconst store = createStore(\n    combineReducers({\n        auth,\n        ui,\n        organizations,\n        dataSources,\n        measures,\n        payers,\n        measureResults\n    }),\n    applyMiddleware(...middleWares)\n);\n\nexport default store;\n\n// Load the data from the backend ==============================================\nhttp.request(\"api/ui\").then(data => {\n    store.dispatch(loadOrganizations(data.organizations));\n    store.dispatch(loadPayers(data.payers));\n    store.dispatch(loadMeasures(data.measures));\n    store.dispatch(loadDataSources(data.dataSources));\n}).catch(console.error);\n","const TOGGLE = \"actions:organization:toggle\";\nconst LOAD   = \"actions:organization:loadData\";\n\nexport function toggle(id)\n{\n    return { type: TOGGLE, payload: id };\n}\n\nexport function load(data)\n{\n    return { type: LOAD, payload: data };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case TOGGLE:\n        return {\n            ...state,\n            [action.payload]: {\n                ...state[action.payload],\n                enabled: !state[action.payload].enabled\n            }\n        };\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","const LOAD = \"actions:measures:loadData\";\n\nexport function load(data)\n{\n    return { type: LOAD, payload: data };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","import React              from \"react\";\nimport PropTypes          from \"prop-types\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport logo               from \"./logo.png\";\nimport { logout }         from \"../../store/auth\";\nimport                         \"./Header.scss\";\n\nexport default class Header extends React.Component {\n\n    static propTypes = {\n        user    : PropTypes.object,\n        dispatch: PropTypes.func,\n        loading : PropTypes.bool\n    };\n\n    render() {\n        return (\n            <header className=\"app-header navbar navbar-expand-lg\">\n                <div className=\"container collapse navbar-collapse justify-content-between\">\n                    <div className=\"navbar-brand\">\n                        <NavLink className=\"app-link\" to=\"/measures\">\n                            <img src={logo} className=\"app-logo\" alt=\"logo\" />\n                        </NavLink>\n                    </div>\n                    { this.props.user && (\n                        <>\n                            <ul className=\"navbar-nav justify-content-center\">\n                                <Route path=\"/measures\" render={() => (\n                                    <li className=\"nav-item\">\n                                        <b className=\"nav-link active\">Measures</b>\n                                    </li>\n                                )} />\n                                <Route path=\"/report\" render={() => (\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <NavLink className=\"nav-link\" to=\"/measures\">Measures</NavLink>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <b className=\"nav-link active\">Report</b>\n                                        </li>\n                                    </>\n                                )} />\n                            </ul>\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item text-right\">\n                                    <a className=\"nav-link\" onClick={e => {\n                                        e.preventDefault();\n                                        this.props.dispatch(logout());\n                                    }} href=\"/login\">\n                                        <i className={\n                                            \"fas fa-power-off\" + (\n                                                this.props.loading ? \" fa-spin\" : \"\"\n                                            )\n                                        } style={{ color: \"#FA0\" }}/> Logout\n                                    </a>\n                                </li>\n                            </ul>\n                        </>\n                    )}\n                </div>\n            </header>\n        );\n    }\n}\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport                \"./Checkbox.scss\";\n\n\nexport default class Checkbox extends React.Component\n{\n    static propTypes = {\n        label   : PropTypes.string.isRequired,\n        checked : PropTypes.oneOfType([PropTypes.bool, PropTypes.number]).isRequired,\n        disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n        onChange: PropTypes.func.isRequired,\n        radio   : PropTypes.bool\n    };\n\n    render()\n    {\n        const iconClass = this.props.radio ?\n            (this.props.checked ? \"fa fa-check-circle\" : \"far fa-circle\") :\n            (this.props.checked ? \"fas fa-check-square\" : \"far fa-square\");\n\n        return (\n            <label\n                className={\"checkbox-label\" + (this.props.checked ? \" selected\" : \"\") }\n                onClick={() => !this.props.disabled && this.props.onChange(!this.props.checked) }\n                // @ts-ignore\n                disabled={ !!this.props.disabled }\n            >\n                <i className={ iconClass }/> { this.props.label }\n            </label>\n        );\n    }\n}","import React                from \"react\";\nimport PropTypes            from \"prop-types\";\nimport { connect }          from \"react-redux\";\nimport { toggleDataSource } from \"../../store/dataSources\";\nimport Checkbox             from \"../Checkbox\";\nimport { toggle as toggleOrg   } from \"../../store/organizations\";\nimport                           \"./DataSourceSelector.css\";\n\nclass Sidebar extends React.Component\n{\n    static propTypes = {\n        dataSources     : PropTypes.object.isRequired,\n        toggleDataSource: PropTypes.func.isRequired,\n        toggleOrg       : PropTypes.func.isRequired,\n        organizations   : PropTypes.array.isRequired\n    };\n\n    render()\n    {\n        const { dataSources, organizations, toggleDataSource, toggleOrg } = this.props;\n\n        const ehr = Object.keys(dataSources)\n            .filter(id => dataSources[id].type === \"ehr\")\n            .map(id => dataSources[id]);\n\n\n        return (\n            <div>\n                <h6 className=\"data-sources-title\">ORGANIZATIONS</h6>\n                {\n                    organizations.map(o => (\n                        <Checkbox\n                            key={ o.value }\n                            label={ o.label }\n                            title={ o.description }\n                            checked={ !!o.selected }\n                            onChange={ () => toggleOrg(o.value) }\n                            disabled={ o.selected && organizations.filter(o => o.selected).length < 2 }\n                        />\n                    ))\n                }\n                <br/>\n                <br/>\n                <h6 className=\"data-sources-title\">EHR DATA SOURCES</h6>\n                {\n                    ehr.map(meta => (\n                        <Checkbox\n                            key={ meta.id }\n                            label={ meta.label }\n                            checked={ !!meta.selected }\n                            disabled={ !meta.enabled || (meta.selected && ehr.filter(o => o.selected).length < 2) }\n                            onChange={ () => toggleDataSource(meta.id) }\n                            radio={ meta.type === \"claims\" }\n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        dataSources: { ...state.dataSources },\n        organizations: Object.keys(state.organizations).map(id => ({\n            value      : id,\n            label      : state.organizations[id].name,\n            selected   : state.organizations[id].enabled,\n            description: state.organizations[id].description\n        }))\n    }),\n    dispatch => ({\n        toggleDataSource: id => dispatch(toggleDataSource(id)),\n        toggleOrg       : id => dispatch(toggleOrg(id))\n    })\n)(Sidebar);\n","import React              from \"react\";\nimport DataSourceSelector from \"../DataSourceSelector\";\nimport \"./Sidebar.scss\";\n\nexport default class Sidebar extends React.Component\n{\n    render() {\n        return (\n            <div className=\"col-3 app-sidebar\">\n                <DataSourceSelector/>\n            </div>\n        );\n    }\n}\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport            \"./SQLEditor.css\";\n\nwindow.require.config({ paths: { vs: \"/monaco-editor/min/vs\" }});\n\nexport default class SQLEditor extends React.Component\n{\n    static propTypes = {\n        query         : PropTypes.string,\n        height        : PropTypes.number,\n        options       : PropTypes.object,\n        onHeightChange: PropTypes.func.isRequired,\n        onQuery       : PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        query: \"\"\n    };\n\n    shouldComponentUpdate()\n    {\n        return false;\n    }\n\n    componentWillUnmount()\n    {\n        if (this.editor) {\n            this.editor.dispose();\n            this.editor = null;\n        }\n    }\n\n    componentDidMount()\n    {\n        window.require([\"vs/editor/editor.main\"], monaco => {\n            if (this.editorNode) {\n                this.editor = monaco.editor.create(this.editorNode, {\n                    ...this.props.options,\n                    value: this.props.query\n                });\n\n                // Row Resizer -------------------------------------------------\n                const $ = window.jQuery;\n                const $window = $(window);\n                const $editor = $(this.editorNode);\n\n                $(this.divider).on(\"mousedown\", startEvent => {\n                    const startY = startEvent.clientY;\n                    let height = $editor.css({ overflow: \"hidden\" }).height();\n                    $window.on(\"mouseup.resize\", () => {\n                        $editor.css({ overflow: \"visible\" });\n                        this.props.onHeightChange($editor.outerHeight());\n                        $window.off(\".resize\");\n                    });\n                    $window.on(\"mousemove.resize\", moveEvent => {\n                        $editor.height(height + moveEvent.clientY - startY);\n                    });\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"sql-editor\" ref={ node => this.editorNode = node } style={{ height: this.props.height }} />\n                <div className=\"sql-editor-resizer\" ref={ node => this.divider = node }>.....</div>\n                <button className=\"btn btn-brand active\" onClick={() => this.props.onQuery(this.editor.getValue())}>RUN</button>\n            </div>\n        );\n    }\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport                \"./DataGrid.scss\";\n\nfunction pad(input) {\n    while (input.length % 4) {\n        input += \"=\";\n    }\n    return input;\n}\n\nfunction base64UrlEncode(input) {\n    return pad(btoa(input)).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nexport default class RemoteDataGrid extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * Let the grid know what SQL query has produced the data. This is\n         * needed so that we can build the download csv link\n         */\n        query: PropTypes.string.isRequired,\n\n        /**\n         * The data to render in the grid\n         */\n        data: PropTypes.shape({\n            header: PropTypes.arrayOf(PropTypes.string),\n            data: PropTypes.arrayOf(PropTypes.array)\n        })\n    };\n\n    buildCsvUrl()\n    {\n        return \"http://localhost:3003/sql/csv?q=\" + base64UrlEncode(this.props.query);\n    }\n\n    render() {\n        const { data = {} } = this.props;\n\n        return (\n            <div className=\"table-wrap\">\n                <div className=\"row\">\n                    <div className=\"col-6 align-middle\">\n                        <h5>Preview</h5>\n                    </div>\n                    <div className=\"col-6 text-right\">\n                        <a\n                            className=\"btn btn-brand\"\n                            href={ this.buildCsvUrl() }\n                            download=\"report.csv\"\n                        >DOWNLOAD CSV</a>\n                    </div>\n                </div>\n                <DataGrid cols={ data.header } rows={ data.data} />\n            </div>\n        );\n    }\n}\n\nclass DataGrid extends React.Component\n{\n    static propTypes = {\n        cols: PropTypes.arrayOf(PropTypes.string),\n        rows: PropTypes.arrayOf(PropTypes.array)\n    };\n\n    static defaultProps = {\n        cols: [],\n        rows: [] \n    };\n\n    constructor(props)\n    {\n        super(props);\n        this.wrapper = React.createRef();\n    }\n\n    componentDidUpdate()\n    {\n        this.syncHeader();\n    }\n\n    componentDidMount()\n    {\n        this.syncHeader();\n    }\n\n    syncHeader() {\n        if (this.wrapper.current) {\n            let headerCells = this.wrapper.current.querySelectorAll(\".data-grid-header th\");\n            let bodyCells = this.wrapper.current.querySelectorAll(\".data-grid-body tr:first-child td\");\n            bodyCells.forEach((td, i) => {\n                headerCells[i].style.width = Math.floor(td.clientWidth + 1) + \"px\";\n            });\n        }\n    }\n\n    render()\n    {\n        const { rows, cols } = this.props;\n\n        if (!rows.length) {\n            return <p className=\"text-center\">No data</p>;\n        }\n    \n        const header = (\n            <thead>\n                <tr>\n                { cols.map((key, i) => (\n                    <th key={\"th-\" + i} title={ key }>{ key }</th>\n                )) }\n                </tr>\n            </thead>\n        );\n\n        const body = rows.map((rec, i) => (\n            <tr key={i} tabIndex={0}>\n                { rec.map((key, y) => (\n                    <td key={\"cell-\" + i + \"-\" + y}>{ key }</td>\n                )) }\n            </tr>\n        ));\n\n        return (\n            <div ref={ this.wrapper } className=\"data-grid-wrapper\">\n                <table className=\"table table-sm table-hover data-grid\">\n                    { header }\n                    <tbody>{ body }</tbody>\n                </table>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Chart.scss\";\n\nfunction getCoordinatesForPercent(percent) {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x * 100, y * 100];\n}\n\nexport default class Chart extends React.Component\n{\n    static propTypes = {\n        numerator  : PropTypes.number.isRequired,\n        denominator: PropTypes.number.isRequired,\n        duration   : PropTypes.number,\n        easing     : PropTypes.string\n    };\n\n    static defaultProps = {\n        duration: 1200,\n        easing  : \"easeInOutExpo\"\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { numerator: 0, denominator: 1 };\n    }\n\n    componentDidMount() {\n        this.setState({ animating: true }, () => {\n            window.jQuery({ numerator: 0, denominator: this.props.denominator }).animate(\n                {\n                    numerator  : this.props.numerator,\n                    denominator: this.props.denominator\n                },\n                {\n                    duration: this.props.duration,\n                    easing  : this.props.easing,\n                    step: (now, tween) => this.setState({ [tween.prop]: now }),\n                    complete: () => this.setState({ animating: false })\n                }\n            );\n        });\n    }\n\n    componentDidUpdate() {\n        if (!this.state.animating && this.state.numerator !== this.props.numerator) {\n            this.setState({ animating: true }, () => {\n                window.jQuery({\n                    numerator: this.state.numerator,\n                    denominator: this.state.denominator\n                }).animate(\n                    {\n                        numerator  : this.props.numerator,\n                        denominator: this.props.denominator\n                    },\n                    {\n                        duration: this.props.duration,\n                        easing  : this.props.easing,\n                        step: (now, tween) => this.setState({ [tween.prop]: now }),\n                        complete: () => this.setState({ animating: false })\n                    }\n                );\n            });\n        }\n    }\n\n    render() {\n        const percent = Math.max(Math.min(this.state.numerator / this.state.denominator * 100, 100), 0);\n        const largeArcFlag = percent >= 50 ? 1 : 0;\n        const [x, y] = getCoordinatesForPercent(percent / 100);\n        return (\n            <svg className=\"chart\" viewBox=\"-110 -110 220 220\">\n                <text className=\"chart-big-text\" y={0}>{Math.round(percent)}%</text>\n                {\n                    <text className=\"chart-small-text\" y={35}>\n                        {Math.round(this.state.numerator)}/{Math.round(this.state.denominator)}\n                    </text>\n                }\n                {\n                    percent === 0 ?\n                        <circle cx={0} cy={0} r={100} className=\"chart-arc-bg\"/> :\n                        <g style={{ transform: \"rotate(-0.25turn)\" }}>\n                            <path className=\"chart-arc-main\" d={`M 100 0 A 100 100 0 ${largeArcFlag} 1 ${x} ${y}`}/>\n                            <path className=\"chart-arc-bg\" d={`M ${x} ${y} A 100 100 0 ${largeArcFlag ? 0 : 1 } 1 100 0`}/>\n                        </g>\n                }\n            </svg>\n        );\n    }\n}\n","import React     from \"react\";\nimport moment    from \"moment\";\nimport PropTypes from \"prop-types\";\nimport Chart     from \"../Chart\";\nimport                \"./ReportSummary.scss\";\n\nexport default class ReportSummary extends React.Component\n{\n    static propTypes = {\n        date                  : PropTypes.string.isRequired,\n        clinic                : PropTypes.string,\n        measureName           : PropTypes.string,\n        numeratorValue        : PropTypes.number,\n        denominatorValue      : PropTypes.number,\n        measureDescription    : PropTypes.string,\n        numeratorDescription  : PropTypes.string,\n        denominatorDescription: PropTypes.string\n    };\n\n    render()\n    {\n        const {\n            date,\n            clinic,\n            measureName,\n            numeratorValue,\n            denominatorValue,\n            measureDescription,\n            numeratorDescription,\n            denominatorDescription\n        } = this.props;\n\n\n        return (\n            <div className=\"report-summary\">\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <div className=\"sub-title\">{ clinic }: { moment(date).format(\"MMMM YYYY\") }</div>\n                        <div className=\"title\">{ measureName }</div>\n                    </div>\n                    <div className=\"col\">\n                        <Chart\n                            numerator={ numeratorValue }\n                            denominator={ denominatorValue }\n                        />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p className=\"sub-title\">POPULATION HEALTH IMPACT</p>\n                        <p>{ measureDescription }</p>\n                    </div>\n                </div>\n                <br/>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p className=\"sub-title\">NUMERATOR</p>\n                        <p>{ numeratorDescription }</p>\n                    </div>\n                    <div className=\"col\">\n                        <p className=\"sub-title\">DENOMINATOR</p>\n                        <p>{ denominatorDescription }</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React               from \"react\";\nimport PropTypes           from \"prop-types\";\nimport { connect }         from \"react-redux\";\nimport { Route, NavLink }  from \"react-router-dom\";\nimport Sidebar             from \"../Sidebar\";\nimport SQLEditor           from \"../SQLEditor\";\nimport DataGrid            from \"../DataGrid\";\nimport ReportSummary       from \"../ReportSummary\";\nimport http                from \"../../http\";\nimport { setEditorHeight } from \"../../store/ui\";\n\nfunction formatDuration(ms) {\n    let out = [];\n    let meta = [\n        { label: \"week\"  , n: 1000 * 60 * 60 * 24 * 7 },\n        { label: \"day\"   , n: 1000 * 60 * 60 * 24     },\n        { label: \"hour\"  , n: 1000 * 60 * 60          },\n        { label: \"minute\", n: 1000 * 60               },\n        { label: \"second\", n: 1000                    },\n        { label: \"ms\"    , n: 1                       }\n    ];\n\n    meta.reduce((prev, cur) => {\n        let chunk = Math.floor(prev / cur.n);\n        if (chunk) {\n            out.push(`${chunk} ${cur.label}${chunk > 1 && cur.n > 1 ? \"s\" : \"\"}`);\n            return prev - chunk * cur.n;\n        }\n        return prev;\n    }, ms);\n\n    if (!out.length) {\n        out.push(`0 ${meta.pop().label}`);\n    }\n\n    if (out.length > 1) {\n        let last = out.pop();\n        out[out.length - 1] += \" and \" + last;\n    }\n\n    return out.join(\", \");\n}\n\nclass ReportPage extends React.Component\n{\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                id     : PropTypes.string,\n                date   : PropTypes.string,\n                measure: PropTypes.string,\n                org    : PropTypes.string\n            })\n        }),\n        location: PropTypes.object,\n        ui: PropTypes.shape({\n            sqlEditor: PropTypes.object\n        }),\n        dispatch: PropTypes.func.isRequired,\n        dataSources: PropTypes.object\n    };\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            loading: true,\n            error  : null,\n            data   : null\n        };\n\n        this.timer = null;\n    }\n\n    /**\n     * Starts a timer that is active while a query is running. When the query is\n     * complete (successful or not) the timer will destroy itself. This is used\n     * to measure the total time that it takes to execute a query and receive\n     * the result.\n     */\n    startClock() {\n        const start = Date.now();\n\n        const tick = () => {\n            if (this.state.prestoLoading) {\n                this.setState({\n                    queryTime: Date.now() - start\n                }, () => {\n                    this.timer = setTimeout(tick, 100);\n                });\n            } else {\n                this.timer = null;\n            }\n        };\n\n        tick();\n    }\n\n    /**\n     * Loads the report data\n     */\n    loadData()\n    {\n        const dsKeys = Object.keys(this.props.dataSources);\n        const query = new URLSearchParams(this.props.location.search);\n\n        if (dsKeys.length) {\n            query.delete(\"ds\");\n            dsKeys.forEach(key => {\n                if (this.props.dataSources[key].selected) {\n                    query.append(\"ds\", key);\n                }\n            });\n        }\n\n        this.setState({ loading: true }, () => {\n            http.request(`api/measure/result/report?${query}`).then(\n                data  => {\n                    this.setState({ data, loading: false })\n                    if (data.cohort_sql) {\n                        this.runQuery(data.cohort_sql)\n                    }\n                },\n                error => this.setState({ error, loading: false })\n            );\n        });\n    }\n\n    /**\n     * Execute an SQL query and render the results in the grid\n     * @param {String} q The SQL to execute\n     */\n    runQuery(q)\n    {\n        this.setState({\n            prestoLoading: true,\n            queryTime: 0,\n            query: q\n        }, () => {\n            this.startClock();\n            http.query(q).then(\n                resp => {\n                    this.setState({\n                        prestoLoading: false,\n                        prestoError  : null,\n                        prestoData   : resp\n                    });\n                },\n                err => {\n                    this.setState({\n                        prestoLoading: false,\n                        prestoError  : err,\n                        prestoData   : null\n                    });\n                }\n            );\n        });\n    }\n\n    /**\n     * Fetch the report data after the first render\n     */\n    componentDidMount()\n    {\n        this.loadData();\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if (!this.state.loading) {\n\n            // Detect dataSource selection change\n            const prevDataSources = prevProps.dataSources || {};\n            for (const dsId in prevDataSources) {\n                const curDs = (this.props.dataSources || {})[dsId];\n                if (curDs.selected !== prevDataSources[dsId].selected) {\n                    return this.loadData();\n                }\n            }\n        }\n    }\n\n    renderEditor()\n    {\n        if (!this.state.data || !this.state.data.cohort_sql) {\n            return null;\n        }\n\n        const { queryTime, prestoLoading, prestoData } = this.state;\n\n        return (\n            <>\n            <SQLEditor\n                query={ this.state.data.cohort_sql }\n                { ...this.props.ui.sqlEditor }\n                onHeightChange={ h => this.props.dispatch(setEditorHeight(h)) }\n                onQuery={ q => this.runQuery(q) }\n            />\n            {\n                queryTime ?\n                    <div className=\"float-right\" style={{ marginTop: \"-4em\", fontSize: 11, color: \"#999\", textAlign: \"right\" }}>\n                            Total time: { formatDuration(queryTime) }<br/>\n                        { !prestoLoading && prestoData ? \"Result rows: \" + prestoData.data.length : \"\" }\n                    </div> :\n                    null\n            }\n            </>\n        );\n    }\n\n    createSummaryRenderer()\n    {\n        if (!this.state.data) return null;\n\n        return (\n            <ReportSummary\n                clinic=\"All Clinics\"\n                date={ this.state.data.measureDate }\n                measureName={ this.state.data.measureName }\n                startValue={ this.state.numeratorValue }\n                numeratorValue={ this.state.data.numeratorValue }\n                denominatorValue={ this.state.data.denominatorValue }\n                measureDescription={ this.state.data.measureDescription || \"No description available for this measure\" }\n                numeratorDescription={ this.state.data.numeratorDescription || \"No description available for the numerator of this measure\"   }\n                denominatorDescription={ this.state.data.denominatorDescription || \"No description available for the denominator of this measure\" }\n            />\n        );\n    }\n\n    render()\n    {\n        const {\n            error,\n            prestoError,\n            prestoData,\n            prestoLoading,\n            query\n        } = this.state;\n\n        if ( error ) {\n            console.error(error);\n            return <b>{ error.message }</b>;\n        }\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <Sidebar/>\n                    <div className=\"col-9\">\n                        <div className=\"row\">\n                            <div className=\"col-6 align-middle\">\n                                <h3 style={{ lineHeight: \"43px\", margin: 0 }}>\n                                    <Route path=\"/report\" exact render={() => \"Month Report\" }/>\n                                    <Route path=\"/report/editor\" render={() => \"Cohort Builder\"} />\n                                </h3>\n                            </div>\n                            <div className=\"col-6 text-right\">\n                                <div className=\"btn-group view-toggle\" role=\"group\">\n                                    <NavLink className=\"btn btn-brand\" to={{\n                                        pathname: \"/report\",\n                                        search  : this.props.location.search\n                                    }} exact>REPORT</NavLink>\n                                    <NavLink className=\"btn btn-brand\" to={{\n                                        pathname: \"/report/editor\",\n                                        search  : this.props.location.search\n                                    }} exact>BUILDER</NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <br/>\n                        <Route path=\"/report\"        exact render={() => this.createSummaryRenderer()}/>\n                        <Route path=\"/report/editor\" exact render={() => this.renderEditor()} />\n                        <br/>\n                        <br/>\n                        {\n                            prestoLoading ?\n                                <div className=\"alert alert-info\">Loading...</div> :\n                                prestoError ?\n                                    <div className=\"alert alert-danger\">{ prestoError.message }</div> :\n                                    prestoData === undefined ?\n                                        null :\n                                        prestoData && prestoData.data && prestoData.data.length ?\n                                            <DataGrid data={ prestoData } query={query}/> :\n                                            <div className=\"alert alert-info\">No data to display</div>\n                        }\n                        <br/>\n                        <br/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        ui: state.ui,\n        dataSources: state.dataSources\n    })\n)(ReportPage);\n","import React             from \"react\";\nimport PropTypes         from \"prop-types\";\nimport moment            from \"moment\";\nimport { connect }       from \"react-redux\";\nimport { Link }          from \"react-router-dom\";\nimport config            from \"../../config\";\nimport                        \"./TimelineGrid.scss\";\n\n\nexport class TimelineGrid extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * The data to be rendered within the grid. Contains `description`,\n         * `name` a `measures[]` array to hold the measure results.\n         */\n        data: PropTypes.object,\n\n        /**\n         * Pass the clicked measure up to the parent component where the\n         * selection is being managed.\n         */\n        onRowClick: PropTypes.func,\n\n        /**\n         * Tell the TimelineGrid which is the selected organization ID.\n         * Rows that apply to that ID and to @selectedMeasureId will be\n         * rendered as selected.\n         */\n        selectedOrgId: PropTypes.string,\n\n        /**\n         * Tell the TimelineGrid which is the selected measure ID.\n         * Rows that apply to that ID and to @selectedOrgId will be\n         * rendered as selected.\n         */\n        selectedMeasureId: PropTypes.string,\n\n        /**\n         * The ID of the organization that this grid is about. This can be the\n         * same as @selectedOrgId if there is a selection within that org, or\n         * it can be different, n which case we render table that has no\n         * selected row.\n         */\n        orgId: PropTypes.string,\n\n        /**\n         * The organization that is being rendered.\n         */\n        org: PropTypes.object,\n\n        /**\n         * The dataSources included in this grid\n         */\n        dataSources: PropTypes.object,\n\n        startYear: PropTypes.number\n    };\n\n    static defaultProps = {\n        data: {},\n        startYear: config.startYear\n    };\n\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n        const { description, name, measures } = this.props.data;\n\n        const headerLabels = [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ];\n\n        const bodyRows = [];\n        const now = moment(config.startYear + 1 + \"-01-01\", \"YYYY-MM-DD\");\n\n        // loop over each measure\n        measures.forEach(measure => {\n\n            const cells = [];\n            let i = 0;\n            for (let date in measure.data) {\n\n                const entry      = measure.data[date];\n                const dateObject = moment(date);\n\n                const title = `${dateObject.format(\"MMM YYYY\")} - ${entry.numerator} of ${entry.denominator}`;\n                const pct = Math.round(entry.pct);\n\n                const query = new URLSearchParams();\n                query.set(\"date\", dateObject.format(\"YYYY-MM-DD\"));\n                query.set(\"measure\", measure.id);\n                query.set(\"org\", this.props.org.value);\n                Object.keys(this.props.dataSources).forEach(key => {\n                    if (this.props.dataSources[key].selected) {\n                        query.append(\"ds\", key);\n                    }\n                });\n\n                // Values from the current year \"overlap\" the values from the\n                // last year. We can compare them and show trends\n                if (dateObject.isSame(now, \"year\")) {\n                    cells[i % 12] = (\n                        <td key={date} title={title}>\n                            <Link to={`/report?${query}`}>{ Math.round(pct) }%</Link>\n                        </td>\n                    );\n                }\n\n                // Values from the previous year that do not yet have new data\n                // for the current year\n                else {\n                    const newDate = moment(dateObject).add(1, \"year\").format(\"YYYY-MM\");\n                    if (!measure.data[newDate]) {\n                        cells[i % 12] = (\n                            <td key={date} title={title}>\n                                <Link to={`/report?${query}`} className=\"text-muted\">{ Math.round(pct) }%</Link>\n                            </td>\n                        );\n                    }\n                }\n                i++;\n            }\n\n            if (!cells.length) {\n                cells.push(\n                    <td key=\"empty-1\">-</td>,\n                    <td key=\"empty-2\">-</td>,\n                    <td key=\"empty-3\">-</td>,\n                    <td key=\"empty-4\">-</td>,\n                    <td key=\"empty-5\">-</td>,\n                    <td key=\"empty-6\">-</td>,\n                    <td key=\"empty-7\">-</td>,\n                    <td key=\"empty-8\">-</td>,\n                    <td key=\"empty-9\">-</td>,\n                    <td key=\"empty-10\">-</td>,\n                    <td key=\"empty-11\">-</td>,\n                    <td key=\"empty-12\">-</td>\n                );\n            }\n\n            bodyRows.push(\n                <tr\n                    key={ name + \"-\" + measure.name }\n                    className={\n                        (this.props.selectedOrgId === this.props.orgId &&\n                         this.props.selectedMeasureId === measure.id) ? \"selected\" : \"\" }\n                    onClick={\n                        e => {\n                            // @ts-ignore\n                            if (e.target.nodeName !== \"A\") {\n                                this.props.onRowClick(measure);\n                            }\n                        }\n                    }\n                >\n                    <th>{ measure.name }</th>\n                    { cells }\n                </tr>\n            );\n        });\n\n        const header = (\n            <thead>\n                <tr>\n                    <th></th>\n                    { headerLabels.map((label, i) => (\n                        <th key={\"th-\" + i}>{ label }</th>\n                    )) }\n                </tr>\n            </thead>\n        );\n\n        return (\n            <div>\n                <h4>{ description }</h4>\n                <div className=\"table-responsive\">\n                    <table className=\"table table-sm table-hover timeline-grid\">\n                        { header }\n                        <tbody>{ bodyRows }</tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        dataSources: state.dataSources,\n    })\n)(TimelineGrid);\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment    from \"moment\";\nimport                \"./LineChart.scss\";\n\nconst Highcharts = window.Highcharts;\n\nexport default class LineChart extends React.Component\n{\n    static propTypes = {\n        chartOptions: PropTypes.object\n    };\n\n    componentDidMount() {\n        const fontFamily = \"-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",\" +\n            \"Roboto,\\\"Helvetica Neue\\\",Arial,sans-serif,\\\"Apple Color Emoji\\\"\" +\n            \",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\"\";\n\n        this.chart = window.Highcharts.chart(\"container\", {\n            chart: {\n                type               : \"spline\",\n                plotBackgroundColor: \"#F6F6F6\",\n                plotBorderColor    : \"#DDD\",\n                plotBorderWidth    : 1,\n                zoomType: \"x\"\n            },\n            title: {\n                align: \"center\",\n                style: {\n                    fontFamily,\n                    // fontSize  : \"1.5rem\",\n                    fontSize  : \"calc(8px + 1vw)\",\n                    fontWeight: 500\n                },\n                useHTML: true\n            },\n            subtitle: {\n                align: \"center\",\n                useHTML: true,\n                style: {\n                    fontFamily,\n                    fontSize  : \"1rem\",\n                    fontWeight: 300\n                }\n            },\n            xAxis: [\n                {\n                    lineWidth : 0,\n                    crosshair : true,\n                    type      : \"category\",\n                    id        : \"year_axis\",\n                    showEmpty : false,\n                    categories: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ],\n                    title: {\n                        text: null\n                    }\n                },\n                {\n                    lineWidth : 0,\n                    id        : \"monthAxis\",\n                    crosshair : true,\n                    type      : \"datetime\",\n                    minorTicks: true,\n                    showEmpty : false,\n                    zoomEnabled: true,\n                    min       : +moment().utc().startOf(\"month\"),\n                    max       : +moment().utc().endOf(\"month\").startOf(\"day\"),\n                    dateTimeLabelFormats: {\n                        day: \"%e\"\n                    },\n                    title: {\n                        text: null\n                    }\n                }\n            ],\n            yAxis: {\n                id: \"pct_axis\",\n                title: {\n                    text: \"% Patients\",\n                    style: {\n                        fontFamily,\n                        fontSize  : \"1rem\",\n                        fontWeight: 500\n                    }\n                },\n                lineColor   : \"#CCC\",\n                tickInterval: 25,\n                min         : 0,\n                max         : 100,\n                lineWidth   : 0\n            },\n            tooltip: {\n                crossHairs   : true,\n                shared       : true,\n                useHTML      : true,\n                headerFormat : \"<b>{point.key}</b><hr style=\\\"margin: 2px 0\\\"/><table>\",\n                pointFormat  : \"<tr><td style=\\\"color: {series.color}; text-align: right\\\">{series.name}: </td>\" +\n                    \"<td style=\\\"text-align: right\\\"><b>&nbsp;{point.y} %</b></td></tr>\",\n                footerFormat : \"</table>\",\n                valueDecimals: 2\n            },\n            plotOptions: {\n                spline: {\n                    lineWidth: 3,\n                    states: {\n                        hover: {\n                            lineWidth: 4\n                        }\n                    },\n                    marker: {\n                        enabled: false\n                    }\n                }\n            },\n            series: [\n                {\n                    name  : \"Current Year\",\n                    id    : \"current_year\",\n                    color : \"#4a90e2\",\n                    type  : \"areaspline\",\n                    xAxis : \"year_axis\",\n                    shadow: true,\n                    fillColor: {\n                        linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n                        stops: [\n                            [\n                                0,\n                                Highcharts.color(\"#4a90e2\").setOpacity(0.35).get()\n                            ],\n                            [\n                                1,\n                                Highcharts.color(\"#4a90e2\").setOpacity(0).get()\n                            ]\n                        ]\n                    },\n                    marker: {\n                        enabled: false\n                    }\n                },\n                {\n                    name     : \"Previous Year\",\n                    id       : \"previous_year\",\n                    color    : \"#555\",\n                    dashStyle: \"ShortDot\",\n                    xAxis    : \"year_axis\",\n                    lineWidth: 2\n                }\n            ],\n            navigation: {\n                menuItemStyle: {\n                    fontSize: \"10px\"\n                }\n            },\n            legend: {\n                align        : \"left\",\n                verticalAlign: \"top\",\n                layout       : \"horizontal\",\n                floating     : true,\n                x            : 60,\n                y            : 64\n            },\n        });\n\n        this.chart.update(this.props.chartOptions, true, true, false);\n    }\n\n    componentDidUpdate() {\n        this.chart.drillUp();\n        this.chart.update(this.props.chartOptions, true, true);\n    }\n\n    render() {\n        return <div id=\"container\"/>;\n    }\n}\n","import React             from \"react\";\nimport PropTypes         from \"prop-types\";\nimport { connect }       from \"react-redux\";\nimport moment            from \"moment\";\nimport config            from \"../../config\";\nimport Sidebar           from \"../Sidebar\";\nimport TimelineGrid      from \"../TimelineGrid\";\nimport LineChart         from \"../LineChart\";\nimport { queryMeasures } from \"../../store/measureResults\";\n\n\nclass MeasuresPage extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * The dispatch function is passed internally\n         */\n        dispatch: PropTypes.func.isRequired,\n\n        /**\n         * True if the measure results are currently being loaded\n         */\n        loading: PropTypes.bool,\n\n        /**\n         * The measure results data object (if available)\n         */\n        data: PropTypes.object,\n\n        /**\n         * Any error occurred while loading the measure results data\n         */\n        error: PropTypes.instanceOf(Error),\n\n        organizations: PropTypes.array,\n\n        payers: PropTypes.array,\n\n        measures: PropTypes.object,\n\n        dataSources: PropTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chart: {},\n            selection: {}\n        };\n\n        this.onRowClick = this.onRowClick.bind(this);\n    }\n\n    loadDataIfNeeded(prevProps) {\n\n        // Skip if currently loading\n        if (this.props.loading) {\n            return false;\n        }\n\n        // Skip if organizations are not loaded yet\n        if (!this.props.organizations.length) {\n            return false;\n        }\n\n        // Skip if payers are not loaded yet\n        if (!this.props.payers.length) {\n            return false;\n        }\n\n        // Skip if measures are not loaded yet\n        if (!Object.keys(this.props.measures).length) {\n            return false;\n        }\n\n        // Skip if dataSources are not loaded yet\n        if (!Object.keys(this.props.dataSources).length) {\n            return false;\n        }\n\n        // Load if no data has been loaded yet\n        if (!this.props.data) {\n            return this.props.dispatch(queryMeasures());\n        }\n\n        // Detect state changes\n        if (prevProps) {\n\n            // Detect dataSource changes\n            for (const id in prevProps.dataSources) {\n                const ds  = prevProps.dataSources[id];\n                const cur = this.props.dataSources[id];\n                if (cur.selected !== ds.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n\n            // Detect payer changes\n            for (const ds of prevProps.payers) {\n                const cur = this.props.payers.find(o => o.value === ds.value);\n                if (cur.selected !== ds.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n\n            // Detect organization changes\n            for (const org of prevProps.organizations) {\n                const cur = this.props.organizations.find(o => o.value === org.value);\n                if (cur.selected !== org.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        this.loadDataIfNeeded(prevProps);\n    }\n\n    componentDidMount()\n    {\n        this.loadDataIfNeeded();\n    }\n\n    getSelection() {\n        let { orgId, measureId } = this.state.selection;\n\n        if (!orgId) {\n            orgId = Object.keys(this.props.data.organizations).shift();\n        }\n\n        let org = this.props.data.organizations[orgId];\n\n        if (!org) {\n            orgId = Object.keys(this.props.data.organizations).shift();\n            org = this.props.data.organizations[orgId];\n        }\n\n        let measure;\n\n        if (!measureId) {\n            measure = org.measures[0];\n        } else {\n            measure = org.measures.find(o => o.id === measureId);\n        }\n\n        return { orgId, org, measure };\n    }\n\n    getChartOptions(orgData, measure) {\n        const series = [\n            {\n                data : [],\n                id   : \"current_year\",\n                name : config.startYear + 1,\n                xAxis: \"year_axis\"\n            },\n            {\n                data : [],\n                id   : \"previous_year\",\n                name : config.startYear,\n                xAxis: \"year_axis\"\n            }\n        ];\n\n        Object.keys(measure.data).forEach(key => {\n            const [ year, month ] = key.split(\"-\");\n            const rec = measure.data[key];\n            const point = {\n                x: parseInt(month, 10) - 1,\n                y: rec.pct,\n                name : moment(key).format(\"MMMM\"),\n                xAxis: 0\n            };\n            if (year === String(config.startYear + 1)) {\n                series[0].data.push(point);\n            }\n            else if (year === String(config.startYear)) {\n                series[1].data.push(point);\n            }\n        });\n\n        return {\n            title: {\n                text: measure.name\n            },\n            subtitle: {\n                text: orgData.description\n            },\n            series\n        };\n    }\n\n    // Event Handlers ----------------------------------------------------------\n    onRowClick(orgId, measure)\n    {\n        this.setState({\n            selection: {\n                orgId,\n                measureId: measure.id\n            }\n        });\n    }\n\n    // Rendering methods -------------------------------------------------------\n    renderStage()\n    {\n        const { error, loading, data } = this.props;\n\n        if (loading) {\n            return <p style={{ textAlign: \"center\" }}>Loading...</p>;\n        }\n\n        if (error) {\n            return <pre>{ error.stack }</pre>;\n        }\n\n        if (!data) {\n            return <p style={{ textAlign: \"center\" }}>No data to display</p>;\n        }\n\n        let { orgId, org, measure } = this.getSelection();\n\n        const reports = [];\n        for (let id in data.organizations) {\n            const org = this.props.organizations.find(o => o.value === id);\n            const orgData = data.organizations[id];\n            if (!org.selected) continue;\n            reports.push(\n                <TimelineGrid\n                    key={ \"timeline-\" + id }\n                    data={ orgData }\n                    org={ org }\n                    orgId={ id }\n                    onRowClick={ msr => this.onRowClick(id, msr) }\n                    selectedOrgId={ orgId }\n                    selectedMeasureId={ measure.id }\n                />\n            );\n        }\n\n        return (\n            <>\n                <LineChart key=\"line-chart\" chartOptions={ this.getChartOptions(org, measure) }/>\n                { reports }\n            </>\n        );\n    }\n\n    render()\n    {\n        return (\n            <div className=\"row\">\n                <Sidebar/>\n                <div className=\"col-9\">\n                    { this.renderStage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        organizations: Object.keys(state.organizations).map(id => ({\n            value      : id,\n            label      : state.organizations[id].name,\n            selected   : state.organizations[id].enabled,\n            description: state.organizations[id].description\n        })),\n        payers: Object.keys(state.payers).map(id => ({\n            value   : id,\n            label   : state.payers[id].label,\n            selected: state.payers[id].selected\n        })),\n        measures   : state.measures,\n        dataSources: state.dataSources,\n        data       : state.measureResults.data,\n        loading    : state.measureResults.loading,\n        error      : state.measureResults.error\n    })\n)(MeasuresPage);\n","import React        from \"react\";\nimport PropTypes    from \"prop-types\";\nimport { connect }  from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport logo         from \"./logo.svg\";\nimport { login }    from \"../../store/auth\";\n\nclass LoginPage extends React.Component\n{\n    static propTypes = {\n        error      : PropTypes.oneOfType([PropTypes.instanceOf(Error), PropTypes.string]),\n        loading    : PropTypes.bool,\n        login      : PropTypes.func.isRequired,\n        currentUser: PropTypes.object\n    };\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            email   : \"user@aco.org\",\n            password: \"password\"\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onSubmit(e)\n    {\n        e.preventDefault();\n        this.props.login(this.state.email, this.state.password);\n    }\n\n    onChange(e)\n    {\n        this.setState({ [e.target.name ]: e.target.value });\n    }\n\n    render()\n    {\n        let { from } = this.props.location.state || { from: { pathname: \"/measures\" } };\n        if (!from || !from.pathname || from.pathname === \"/\") {\n            from = { pathname: \"/measures\" }\n        }\n\n        if (this.props.currentUser) {\n            return <Redirect to={from} push />\n        }\n\n        return (\n            <div className=\"row\">\n                <form className=\"mx-auto col-xs-12 col-sm-8 col-md-6 col-lg-4\"\n                    onSubmit={ this.onSubmit }>\n                    { this.props.error && (\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            { String(this.props.error) }\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email1\">Email address</label>\n                        <input\n                            type=\"email\"\n                            className=\"form-control\"\n                            id=\"email1\"\n                            placeholder=\"Enter email\"\n                            name=\"email\"\n                            value={ this.state.email }\n                            onChange={ this.onChange }\n                            disabled={ this.props.loading }\n                        />\n                        <small className=\"form-text text-muted\">Enter \"user@aco.org\" or \"user@payer.org\"</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password1\">Password</label>\n                        <input\n                            type=\"password\"\n                            className=\"form-control\"\n                            id=\"password1\"\n                            placeholder=\"Password\"\n                            name=\"password\"\n                            value={ this.state.password }\n                            onChange={ this.onChange }\n                            disabled={ this.props.loading }\n                        />\n                        <small className=\"form-text text-muted\">The default password is \"password\"</small>\n                    </div>\n                    <br/>\n                    <button\n                        disabled={ this.props.loading }\n                        type=\"submit\"\n                        className=\"btn btn-block btn-brand active\"\n                    >\n                        { this.props.loading && <i className=\"fas fa-spinner fa-spin\"/> } Login\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className=\"text-center\">\n                        <img src={logo} alt=\"BCH Logo\" width=\"150\"/>\n                    </p>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => state.auth,\n    dispatch => ({\n        // @ts-ignore\n        login: (email, pass) => dispatch(login(email, pass))\n    })\n)(LoginPage);\n","import React               from \"react\";\nimport { BrowserRouter }   from \"react-router-dom\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect }         from \"react-redux\";\nimport PropTypes           from \"prop-types\";\nimport Header              from \"../Header\";\nimport ReportPage          from \"../ReportPage\";\nimport MeasuresPage        from \"../MeasuresPage\";\nimport LoginPage           from \"../LoginPage\";\nimport                          \"./App.scss\";\n\nclass PrivateRoute extends React.Component\n{\n    static propTypes = {\n        user: PropTypes.object,\n        component: PropTypes.any\n    };\n\n    render() {\n        const { user, component: Component, ...rest } = this.props;\n        return (\n            <Route {...rest} render={ props => (\n                user ?\n                    <Component {...props} /> :\n                    <Redirect to={{\n                        pathname: \"/login\",\n                        state: { from: props.location }\n                    }} />\n            ) } />\n        );\n    }\n}\n\nfunction CPR(props) {\n    const Component = connect(state => ({\n        ...props,\n        user: state.auth.currentUser\n    }))(PrivateRoute);\n\n    return <Component {...props}/>;\n}\n\nclass App extends React.Component\n{\n    static propTypes = {\n        user: PropTypes.object,\n        loading: PropTypes.bool,\n        dispatch: PropTypes.func\n    };\n\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Header\n                        user={ this.props.user }\n                        loading={ this.props.loading }\n                        dispatch={ this.props.dispatch }\n                    />\n                    <div className=\"container\" style={{ marginTop: 30 }}>\n                        <CPR path=\"/\"           component={ReportPage} exact />\n                        <CPR path=\"/report\"     component={ReportPage} />\n                        <CPR path=\"/measures\"   component={MeasuresPage} />\n                        <Route path=\"/login\"    component={LoginPage} />\n                    </div>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default connect(state => ({\n    user: state.auth.currentUser,\n    loading: state.auth.loading\n}))(App);\n","import React             from \"react\";\nimport { Provider }      from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store             from \"./store\";\nimport App               from \"./components/App\";\n\n\nexport default class Root extends React.Component\n{\n    render() {\n        return (\n            <BrowserRouter>\n                <Provider store={ store }>\n                    <App/>\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n\n","import React    from 'react';\nimport ReactDOM from 'react-dom';\nimport App      from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}