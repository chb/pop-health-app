{"version":3,"sources":["components/Header/logo.png","components/LoginPage/logo.svg","store/dataSources.js","store/ui.js","http.js","store/auth.js","store/payers.js","config.js","store/measureResults.js","store/index.js","store/organizations.js","store/measures.js","components/Header/index.jsx","components/Checkbox/index.jsx","components/DataSourceSelector/index.jsx","components/Sidebar/index.jsx","components/SQLEditor/index.jsx","components/DataGrid/index.jsx","components/Chart/index.jsx","components/Chart/PROChart.jsx","components/ReportSummary/index.jsx","components/ReportPage/index.jsx","components/TimelineGrid/index.jsx","components/LineChart/index.jsx","components/MeasuresPage/index.jsx","components/LoginPage/index.jsx","components/App/index.jsx","App.js","index.js"],"names":["module","exports","TOGGLE","LOAD","MERGE","countSelected","state","selectedCount","id","enabled","INITIAL_STATE","sqlEditor","height","options","value","language","lineNumbers","scrollBeyondLastLine","automaticLayout","emptySelectionClipboard","folding","fontFamily","fontSize","glyphMargin","lineHeight","mouseWheelZoom","renderLineHighlight","minimap","renderCharacters","window","location","fetch","http","uri","url","URL","origin","href","mode","credentials","then","res","ok","error","Error","status","statusText","Object","defineProperty","json","login","username","password","body","URLSearchParams","set","method","logout","query","sql","data","append","request","$","jQuery","loading","currentUser","JSON","parse","sessionStorage","SET_LOADING","setLoading","payload","type","merge","startYear","SET_ERROR","SET_DATA","getQueryUri","org","ds","q","cfg","keys","organizations","map","dataSources","selected","has","sync","searchParams","get","history","replaceState","delete","qs","toString","queryMeasures","dispatch","getState","middleWares","thunk","store","createStore","combineReducers","auth","action","extend","ui","newState","forEach","rec","measures","payers","nextState","measureResults","applyMiddleware","loadOrganizations","loadPayers","loadMeasures","oldState","payerId","find","ds_id","loadDataSources","catch","console","Header","className","NavLink","to","src","logo","alt","this","props","user","Route","path","render","onClick","e","preventDefault","removeItem","style","color","React","Component","Checkbox","iconClass","radio","checked","disabled","onChange","label","Sidebar","toggleDataSource","toggleOrg","disableOrganizations","ehr","filter","o","key","title","description","length","meta","connect","name","require","config","paths","vs","SQLEditor","editor","dispose","monaco","editorNode","create","$window","$editor","divider","on","startEvent","startY","clientY","css","overflow","onHeightChange","outerHeight","off","moveEvent","ref","node","onQuery","getValue","defaultProps","RemoteDataGrid","input","pad","btoa","replace","buildCsvUrl","download","cols","header","rows","DataGrid","wrapper","createRef","syncHeader","current","headerCells","querySelectorAll","td","i","width","Math","floor","clientWidth","tabIndex","y","Chart","numerator","denominator","setState","animating","animate","duration","easing","step","now","tween","_unmounted","prop","complete","percent","max","min","largeArcFlag","cos","PI","sin","getCoordinatesForPercent","x","viewBox","round","cx","cy","r","transform","d","PROChart","score","zones","section","all","startPct","endPct","startX","endX","endY","fill","ReportSummary","date","clinic","measureName","numeratorValue","denominatorValue","measureDescription","numeratorDescription","denominatorDescription","measureId","moment","format","dangerouslySetInnerHTML","__html","ReportPage","timer","start","Date","tick","prestoLoading","queryTime","setTimeout","dsKeys","search","cohort_sql","runQuery","startClock","resp","prestoError","prestoData","err","loadData","prevProps","prevDataSources","dsId","h","marginTop","textAlign","ms","out","n","reduce","prev","cur","chunk","push","pop","last","join","formatDuration","minHeight","message","undefined","measureDate","startValue","margin","exact","role","pathname","createSummaryRenderer","renderEditor","TimelineGrid","bodyRows","measure","cells","entry","dateObject","pct","isSame","Link","newDate","add","selectedOrgId","orgId","selectedMeasureId","target","nodeName","onRowClick","contextTypes","router","PropTypes","object","Highcharts","LineChart","chart","plotBackgroundColor","plotBorderColor","plotBorderWidth","zoomType","align","fontWeight","useHTML","subtitle","xAxis","lineWidth","crosshair","showEmpty","categories","text","minorTicks","zoomEnabled","utc","startOf","endOf","dateTimeLabelFormats","day","yAxis","lineColor","tickInterval","tooltip","crossHairs","shared","headerFormat","pointFormat","footerFormat","valueDecimals","plotOptions","spline","states","hover","marker","series","shadow","fillColor","linearGradient","x1","x2","y1","y2","stops","setOpacity","dashStyle","navigation","menuItemStyle","legend","verticalAlign","layout","floating","update","chartOptions","drillUp","MeasuresPage","selection","bind","loadDataIfNeeded","shift","orgData","split","year","month","point","parseInt","String","stack","getSelection","reports","msr","getChartOptions","renderStage","LoginPage","email","onSubmit","from","Redirect","htmlFor","placeholder","pass","stringify","PrivateRoute","component","rest","CPR","App","BrowserRouter","Root","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2322ecd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.21f34708.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bb973869.svg\";","const TOGGLE = \"actions:dataSources:toggle\";\nconst LOAD   = \"actions:dataSources:loadData\";\nconst MERGE  = \"actions:dataSources:merge\";\n\nfunction countSelected(state) {\n    let selectedCount = 0;\n    for (const id in state) {\n        if (state[id].enabled) {\n            selectedCount += 1;\n        }\n    }\n    return selectedCount;\n}\n\nexport function toggleDataSource(id)\n{\n    return { type: TOGGLE, payload: id };\n}\n\nexport function load(data)\n{\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const newState = {};\n\n        data.forEach(rec => {\n            let enabled = !!rec.enabled;\n            let selected = !!rec.selected;\n\n            if (rec.type === \"claims\") {\n                enabled = false;\n                const payerId = Object.keys(oldState.payers).find(\n                    id => oldState.payers[id].ds_id === rec.id\n                );\n\n                if (!payerId || oldState.payers[payerId].selected) {\n                    selected = true;\n                }\n            }\n\n            newState[rec.id] = {\n                ...rec,\n                selected,\n                enabled\n            };\n        });\n        dispatch({ type: LOAD, payload: newState });\n    };\n}\n\nexport function toggle(id, on) {\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const selectedCount = countSelected(oldState);\n\n        // If we only have one item selected, an \"unselect request\" must be ignored\n        if (selectedCount <= 1 && !on) {\n            return;\n        }\n\n        dispatch({\n            type: MERGE,\n            payload: {\n                [id]: {\n                    selected: !!on\n                }\n            }\n        });\n    };\n}\n\nexport function selectClaimsDataSource(id) {\n    return function(dispatch, getState) {\n        const oldState = getState();\n        const newState = { ...oldState.dataSources };\n\n        for (const key in newState) {\n            if (newState[key].type === \"claims\") {\n                newState[key].selected = key === id;\n            }\n        }\n\n        dispatch({ type: MERGE, payload: newState });\n    };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n\n    case TOGGLE: {\n        const selectedCount = countSelected(state);\n        if (selectedCount <= 1 && state[action.payload].selected) {\n            return state;\n        }\n        return {\n            ...state,\n            [action.payload]: {\n                ...state[action.payload],\n                selected: !state[action.payload].selected\n            }\n        };\n    }\n\n    case LOAD:\n        return { ...action.payload };\n\n    case MERGE:\n        // @ts-ignore\n        return window.jQuery.extend(true, state, action.payload);\n\n    default:\n        return state;\n    }\n}\n","const INITIAL_STATE = {\n    sqlEditor: {\n        height: 200,\n        options: {\n            value: \"\",\n            language: \"sql\",\n            lineNumbers: \"on\",\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            emptySelectionClipboard: false,\n            folding: true,\n            fontFamily: \"Menlo, monospace\",\n            fontSize: 13,\n            glyphMargin: true,\n            lineHeight: 16,\n            mouseWheelZoom: true,\n            renderLineHighlight: \"all\",\n            minimap: {\n                enabled: false,\n                renderCharacters: false\n            }\n        }\n    }\n};\n\nconst SET_EDITOR_HEIGHT = \"actions:ui:sql-editor:setHeight\";\n\nexport function setEditorHeight(height)\n{\n    return { type: SET_EDITOR_HEIGHT, payload: height };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case SET_EDITOR_HEIGHT:\n        return {\n            ...state,\n            sqlEditor: {\n                ...state.sqlEditor,\n                height: action.payload\n            }\n        };\n    default:\n        return state;\n    }\n}","// This file contains the functions for communication with the backend.\n\nconst { location, fetch } = window;\n\n\nfunction http(uri, options) {\n    const url = new URL(uri, location.origin);\n    return fetch(url.href, {\n        mode: \"cors\",\n        credentials: \"include\",\n        ...options\n    })\n    .then(res => {\n        if (!res.ok) {\n            const error = new Error(`${res.status} ${res.statusText}`);\n            Object.defineProperty(error, \"data\", {\n                value: {\n                    status    : res.status,\n                    statusText: res.statusText\n                }\n            });\n            throw error;\n        }\n        return res;\n    })\n    .then(res => res.json())\n    .then(res => {\n        if (res.error) {\n            throw new Error(res.error);\n        }\n        return res;\n    });\n}\n\nexport function login(username, password) {\n    const body = new URLSearchParams();\n    body.set(\"username\", username);\n    body.set(\"password\", password);\n    return http(\"auth/login\", { method: \"POST\", body });\n}\n\nexport function logout() {\n    return http(\"auth/logout\");\n}\n\nexport function query(sql) {\n    const data = new URLSearchParams();\n    data.append(\"query\", sql);\n    return http(\"sql\", {\n        method: \"POST\",\n        body: data\n    });\n}\n\nexport default {\n    login,\n    logout,\n    query,\n    request: http\n};\n","import http from \"../http\";\n\n// @ts-ignore\nconst $ = window.jQuery;\n\nconst INITIAL_STATE = {\n    loading: false,\n    error: null,\n    currentUser: JSON.parse(sessionStorage.currentUser || \"null\")\n};\n\nconst MERGE       = \"actions:auth:merge\";\nconst SET_LOADING = \"actions:auth:setLoading\";\n\nexport function setLoading(payload)\n{\n    return { type: SET_LOADING, payload };\n}\n\nexport function merge(payload)\n{\n    return { type: MERGE, payload };\n}\n\nexport function login(email, password)\n{\n    return function (dispatch)\n    {\n        dispatch(setLoading(true));\n        return http.login(email, password).then(user => {\n            sessionStorage.currentUser = JSON.stringify(user);\n            dispatch(merge({\n                currentUser: user,\n                error: null,\n                loading: false\n            }));\n        }).catch(error => {\n            console.error(error);\n            dispatch(merge({ error, loading: false }));\n        });\n    };\n}\n\nexport function logout()\n{\n    return function (dispatch)\n    {\n        dispatch(setLoading(true));\n        return http.logout().then(() => {\n            sessionStorage.removeItem(\"currentUser\");\n            dispatch(merge({\n                currentUser: null,\n                error: null,\n                loading: false\n            }));\n        });\n    };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case MERGE:\n        return $.extend(true, {}, state, action.payload);\n    case SET_LOADING:\n        return { ...state, loading: !!action.payload };\n    default:\n        return state;\n    }\n}\n","import { selectClaimsDataSource } from \"./dataSources\";\n\nconst TOGGLE = \"actions:payers:toggle\";\nconst LOAD   = \"actions:payers:loadData\";\n\nexport function toggle(id) {\n    return function(dispatch, getState) {\n\n        const oldState = getState();\n        const payer = oldState.payers[id];\n        const correspondingClaimsDataSourceId = payer.ds_id;\n\n        if (!payer.selected) {\n            dispatch(selectClaimsDataSource(correspondingClaimsDataSourceId));\n        }\n        dispatch({ type: TOGGLE, payload: id });\n    };\n}\n\nexport function load(data) {\n    return function(dispatch) {\n        dispatch({ type: LOAD, payload: data });\n    };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case TOGGLE: {\n        const nextState = {};\n        for (const id in state) {\n            nextState[id] = {\n                ...state[id],\n                selected: id === action.payload ? !state[action.payload].selected : false\n            };\n        }\n        return nextState;\n    }\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","export default {\n    startYear: +(process.env.REACT_APP_START_YEAR || new Date().getFullYear() - 1)\n};\n","import http from \"../http\";\nimport cfg  from \"../config\";\n\n\nconst INITIAL_STATE = {\n    loading: false,\n    error  : null,\n    data   : null,\n    uri    : \"\"\n};\n\nconst SET_LOADING = \"actions:measureResults:setLoading\";\nconst SET_ERROR   = \"actions:measureResults:setError\";\nconst SET_DATA    = \"actions:measureResults:setData\";\nconst MERGE       = \"actions:measureResults:merge\";\n\n/**\n * Compile and return the uri that will be used to query the measure results.\n * If any of the needed variables are missing (E.g. not available yet), it\n * will return null.\n * @param {Object} state\n * @param {Object} [options]\n * @param {string} [options.org] Organization ID\n * @param {string} [options.ds] Dataset ID\n */\nexport function getQueryUri(state, { org, ds } = {})\n{\n    let q = new URLSearchParams();\n\n    // Two year time range based on the startYear config -----------------------\n    q.append(\"startDate\", `${cfg.startYear    }-01-01`);\n    q.append(\"endDate\"  , `${cfg.startYear + 1}-12-31`);\n\n    // organizations -----------------------------------------------------------\n    if (org) {\n        q.append(\"org\", org);\n    } else {\n        Object.keys(state.organizations).map(id => {\n            if (state.organizations[id].enabled) q.append(\"org\", id);\n            return true;\n        });\n    }\n\n    // Data Sources ------------------------------------------------------------\n    if (ds) {\n        q.append(\"ds\", ds);\n    } else {\n        Object.keys(state.dataSources).map(id => {\n            if (state.dataSources[id].selected) q.append(\"ds\", id);\n            return true;\n        });\n    }\n\n    // data source is required\n    if (!q.has(\"ds\")) {\n        return null;\n    }\n\n    // If \"sync\" is added to the current window location, pass it through to the\n    // back-end to tell it to sync the data.\n    const url  = new URL(window.location.href);\n    const sync = url.searchParams.get(\"sync\");\n\n    if (sync) {\n        q.append(\"sync\", sync);\n\n        // Also make sure we remove \"sync\" from the URL after we have used it!\n        if (window.history.replaceState) {\n            url.searchParams.delete(\"sync\");\n            window.history.replaceState({}, \"\", url.href);\n        }\n    }\n\n    const qs = q.toString();\n\n    if (!qs) {\n        return null;\n    }\n\n    return \"api/measure/result?\" + qs;\n}\n\nexport function queryMeasures(options = {})\n{\n    return function(dispatch, getState) {\n        const state = getState();\n        const uri   = getQueryUri(state, options);\n        if (uri && uri !== state.uri) {\n            dispatch(merge({ uri, loading: true }));\n            http.request(uri).then(\n                data  => dispatch(merge({  data, loading: false })),\n                error => dispatch(merge({ error, loading: false }))\n            );\n        }\n    };\n}\n\nexport function setLoading(isLoading)\n{\n    return { type: SET_LOADING, payload: !!isLoading };\n}\n\nexport function setError(error)\n{\n    return { type: SET_ERROR, payload: error };\n}\n\nexport function setData(data)\n{\n    return { type: SET_DATA, payload: data };\n}\n\nexport function merge(payload)\n{\n    return { type: MERGE, payload };\n}\n\nexport default function reducer(state = INITIAL_STATE, action)\n{\n    switch (action.type) {\n    case SET_LOADING:\n        return { ...state, loading: !!action.payload };\n    case SET_ERROR:\n        return { ...state, error: action.payload };\n    case SET_DATA:\n        return { ...state, data: action.payload };\n    case MERGE:\n        return { ...state, ...action.payload };\n    default:\n        return state;\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk          from \"redux-thunk\";\nimport dataSources    from \"./dataSources\";\nimport ui             from \"./ui\";\nimport auth           from \"./auth\";\nimport organizations  from \"./organizations\";\nimport measures       from \"./measures\";\nimport payers         from \"./payers\";\nimport measureResults from \"./measureResults\";\nimport http           from \"../http\";\n\nimport { load as loadOrganizations } from \"./organizations\";\nimport { load as loadPayers        } from \"./payers\";\nimport { load as loadMeasures      } from \"./measures\";\nimport { load as loadDataSources   } from \"./dataSources\";\n\nconst middleWares = [ thunk ];\n\n// Create logger middleware that will log all redux action but only use that in development.\nif (process.env.NODE_ENV === \"development\" && console && console.groupCollapsed) {\n    let logger = _store => {\n        return next => {\n            return action => {\n                let result;\n                if (!action.__no_log) {\n                    console.groupCollapsed(action.type);\n                    console.info(\"dispatching\", action);\n                    result = next(action);\n                    console.log(\"next state\", _store.getState());\n                    console.groupEnd();\n                }\n                else {\n                    result = next(action);\n                }\n                return result;\n            };\n        };\n    };\n\n    // @ts-ignore\n    middleWares.push(logger);\n}\n\n\nconst store = createStore(\n    combineReducers({\n        auth,\n        ui,\n        organizations,\n        dataSources,\n        measures,\n        payers,\n        measureResults\n    }),\n    applyMiddleware(...middleWares)\n);\n\nexport default store;\n\n// Load the data from the backend ==============================================\nhttp.request(\"api/ui\").then(data => {\n    store.dispatch(loadOrganizations(data.organizations));\n    store.dispatch(loadPayers(data.payers));\n    store.dispatch(loadMeasures(data.measures));\n    store.dispatch(loadDataSources(data.dataSources));\n}).catch(console.error);\n","const TOGGLE = \"actions:organization:toggle\";\nconst LOAD   = \"actions:organization:loadData\";\n\nexport function toggle(id)\n{\n    return { type: TOGGLE, payload: id };\n}\n\nexport function load(data)\n{\n    return { type: LOAD, payload: data };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case TOGGLE:\n        return {\n            ...state,\n            [action.payload]: {\n                ...state[action.payload],\n                enabled: !state[action.payload].enabled\n            }\n        };\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","const LOAD = \"actions:measures:loadData\";\n\nexport function load(data)\n{\n    return { type: LOAD, payload: data };\n}\n\nexport default function reducer(state = {}, action)\n{\n    switch (action.type) {\n    case LOAD: {\n        const newState = {};\n        action.payload.forEach(rec => {\n            newState[rec.id] = rec;\n        });\n        return newState;\n    }\n    default:\n        return state;\n    }\n}","import React              from \"react\";\nimport PropTypes          from \"prop-types\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport logo               from \"./logo.png\";\nimport { logout }         from \"../../store/auth\";\nimport                         \"./Header.scss\";\n\nexport default class Header extends React.Component {\n\n    static propTypes = {\n        user    : PropTypes.object,\n        dispatch: PropTypes.func,\n        loading : PropTypes.bool\n    };\n\n    render() {\n        return (\n            <header className=\"app-header navbar navbar-expand-lg\">\n                <div className=\"container collapse navbar-collapse justify-content-between\">\n                    <div className=\"navbar-brand\">\n                        <NavLink className=\"app-link\" to=\"/measures\">\n                            <img src={logo} className=\"app-logo\" alt=\"logo\" />\n                        </NavLink>\n                    </div>\n                    { this.props.user && (\n                        <>\n                            <ul className=\"navbar-nav justify-content-center\">\n                                <Route path=\"/measures\" render={() => (\n                                    <li className=\"nav-item\">\n                                        <b className=\"nav-link active\">Measures</b>\n                                    </li>\n                                )} />\n                                <Route path=\"/report\" render={() => (\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <NavLink className=\"nav-link\" to=\"/measures\">Measures</NavLink>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <b className=\"nav-link active\">Report</b>\n                                        </li>\n                                    </>\n                                )} />\n                            </ul>\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item text-right\">\n                                    <a className=\"nav-link\" onClick={e => {\n                                        e.preventDefault();\n                                        this.props.dispatch(logout());\n                                    }} href=\"/login\">\n                                        <i className={\n                                            \"fas fa-power-off\" + (\n                                                this.props.loading ? \" fa-spin\" : \"\"\n                                            )\n                                        } style={{ color: \"#FA0\" }}/> Logout\n                                    </a>\n                                </li>\n                            </ul>\n                        </>\n                    )}\n                </div>\n            </header>\n        );\n    }\n}\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport                \"./Checkbox.scss\";\n\n\nexport default class Checkbox extends React.Component\n{\n    static propTypes = {\n        label   : PropTypes.string.isRequired,\n        checked : PropTypes.oneOfType([PropTypes.bool, PropTypes.number]).isRequired,\n        disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n        onChange: PropTypes.func.isRequired,\n        radio   : PropTypes.bool\n    };\n\n    render()\n    {\n        const iconClass = this.props.radio ?\n            (this.props.checked ? \"fa fa-check-circle\" : \"far fa-circle\") :\n            (this.props.checked ? \"fas fa-check-square\" : \"far fa-square\");\n\n        return (\n            <label\n                className={\"checkbox-label\" + (this.props.checked ? \" selected\" : \"\") }\n                onClick={() => !this.props.disabled && this.props.onChange(!this.props.checked) }\n                // @ts-ignore\n                disabled={ !!this.props.disabled }\n            >\n                <i className={ iconClass }/> { this.props.label }\n            </label>\n        );\n    }\n}","import React                from \"react\";\nimport PropTypes            from \"prop-types\";\nimport { connect }          from \"react-redux\";\nimport { toggleDataSource } from \"../../store/dataSources\";\nimport Checkbox             from \"../Checkbox\";\nimport { toggle as toggleOrg   } from \"../../store/organizations\";\nimport                           \"./DataSourceSelector.css\";\n\nclass Sidebar extends React.Component\n{\n    static propTypes = {\n        dataSources         : PropTypes.object.isRequired,\n        toggleDataSource    : PropTypes.func.isRequired,\n        toggleOrg           : PropTypes.func.isRequired,\n        organizations       : PropTypes.array.isRequired,\n        disableOrganizations: PropTypes.bool\n    };\n\n    render()\n    {\n        const {\n            dataSources,\n            organizations,\n            toggleDataSource,\n            toggleOrg,\n            disableOrganizations\n        } = this.props;\n\n        const ehr = Object.keys(dataSources)\n            .filter(id => dataSources[id].type === \"ehr\")\n            .map(id => dataSources[id]);\n\n\n        return (\n            <div>\n                <h6 className=\"data-sources-title\">ORGANIZATIONS</h6>\n                {\n                    organizations.map(o => (\n                        <Checkbox\n                            key={ o.value }\n                            label={ o.label }\n                            title={ o.description }\n                            checked={ !!o.selected }\n                            onChange={ () => toggleOrg(o.value) }\n                            disabled={ !!disableOrganizations || (o.selected && organizations.filter(o => o.selected).length < 2) }\n                        />\n                    ))\n                }\n                <br/>\n                <br/>\n                <h6 className=\"data-sources-title\">EHR DATA SOURCES</h6>\n                {\n                    ehr.map(meta => (\n                        <Checkbox\n                            key={ meta.id }\n                            label={ meta.label }\n                            checked={ !!meta.selected }\n                            disabled={ !meta.enabled || (meta.selected && ehr.filter(o => o.selected).length < 2) }\n                            onChange={ () => toggleDataSource(meta.id) }\n                            radio={ meta.type === \"claims\" }\n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        dataSources: { ...state.dataSources },\n        organizations: Object.keys(state.organizations).map(id => ({\n            value      : id,\n            label      : state.organizations[id].name,\n            selected   : state.organizations[id].enabled,\n            description: state.organizations[id].description\n        }))\n    }),\n    dispatch => ({\n        toggleDataSource: id => dispatch(toggleDataSource(id)),\n        toggleOrg       : id => dispatch(toggleOrg(id))\n    })\n)(Sidebar);\n","import React              from \"react\";\nimport DataSourceSelector from \"../DataSourceSelector\";\nimport \"./Sidebar.scss\";\n\nexport default class Sidebar extends React.Component\n{\n    render() {\n        return (\n            <div className=\"col-3 app-sidebar\">\n                <DataSourceSelector disableOrganizations={ this.props.disableOrganizations }/>\n            </div>\n        );\n    }\n}\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport            \"./SQLEditor.css\";\n\nwindow.require.config({ paths: { vs: \"/monaco-editor/min/vs\" }});\n\nexport default class SQLEditor extends React.Component\n{\n    static propTypes = {\n        query         : PropTypes.string,\n        height        : PropTypes.number,\n        options       : PropTypes.object,\n        onHeightChange: PropTypes.func.isRequired,\n        onQuery       : PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        query: \"\"\n    };\n\n    shouldComponentUpdate()\n    {\n        return false;\n    }\n\n    componentWillUnmount()\n    {\n        if (this.editor) {\n            this.editor.dispose();\n            this.editor = null;\n        }\n    }\n\n    componentDidMount()\n    {\n        window.require([\"vs/editor/editor.main\"], monaco => {\n            if (this.editorNode) {\n                this.editor = monaco.editor.create(this.editorNode, {\n                    ...this.props.options,\n                    value: this.props.query\n                });\n\n                // Row Resizer -------------------------------------------------\n                const $ = window.jQuery;\n                const $window = $(window);\n                const $editor = $(this.editorNode);\n\n                $(this.divider).on(\"mousedown\", startEvent => {\n                    const startY = startEvent.clientY;\n                    let height = $editor.css({ overflow: \"hidden\" }).height();\n                    $window.on(\"mouseup.resize\", () => {\n                        $editor.css({ overflow: \"visible\" });\n                        this.props.onHeightChange($editor.outerHeight());\n                        $window.off(\".resize\");\n                    });\n                    $window.on(\"mousemove.resize\", moveEvent => {\n                        $editor.height(height + moveEvent.clientY - startY);\n                    });\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"sql-editor\" ref={ node => this.editorNode = node } style={{ height: this.props.height }} />\n                <div className=\"sql-editor-resizer\" ref={ node => this.divider = node }>.....</div>\n                <button className=\"btn btn-brand active\" onClick={() => this.props.onQuery(this.editor.getValue())}>RUN</button>\n            </div>\n        );\n    }\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport                \"./DataGrid.scss\";\n\n\nfunction pad(input) {\n    while (input.length % 4) {\n        input += \"=\";\n    }\n    return input;\n}\n\nfunction base64UrlEncode(input) {\n    return pad(btoa(input)).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nexport default class RemoteDataGrid extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * Let the grid know what SQL query has produced the data. This is\n         * needed so that we can build the download csv link\n         */\n        query: PropTypes.string.isRequired,\n\n        /**\n         * The data to render in the grid\n         */\n        data: PropTypes.shape({\n            header: PropTypes.arrayOf(PropTypes.string),\n            data: PropTypes.arrayOf(PropTypes.array)\n        })\n    };\n\n    buildCsvUrl()\n    {\n        return \"/sql/csv?q=\" + base64UrlEncode(this.props.query);\n    }\n\n    render() {\n        const { data = {} } = this.props;\n\n        return (\n            <div className=\"table-wrap\">\n                <div className=\"row\">\n                    <div className=\"col-6 align-middle\">\n                        <h5>Preview</h5>\n                    </div>\n                    <div className=\"col-6 text-right\">\n                        <a\n                            className=\"btn btn-brand\"\n                            href={ this.buildCsvUrl() }\n                            download=\"report.csv\"\n                        >DOWNLOAD CSV</a>\n                    </div>\n                </div>\n                <DataGrid cols={ data.header } rows={ data.data} />\n            </div>\n        );\n    }\n}\n\nclass DataGrid extends React.Component\n{\n    static propTypes = {\n        cols: PropTypes.arrayOf(PropTypes.string),\n        rows: PropTypes.arrayOf(PropTypes.array)\n    };\n\n    static defaultProps = {\n        cols: [],\n        rows: [] \n    };\n\n    constructor(props)\n    {\n        super(props);\n        this.wrapper = React.createRef();\n    }\n\n    componentDidUpdate()\n    {\n        this.syncHeader();\n    }\n\n    componentDidMount()\n    {\n        this.syncHeader();\n    }\n\n    syncHeader() {\n        if (this.wrapper.current) {\n            let headerCells = this.wrapper.current.querySelectorAll(\".data-grid-header th\");\n            let bodyCells = this.wrapper.current.querySelectorAll(\".data-grid-body tr:first-child td\");\n            bodyCells.forEach((td, i) => {\n                headerCells[i].style.width = Math.floor(td.clientWidth + 1) + \"px\";\n            });\n        }\n    }\n\n    render()\n    {\n        const { rows, cols } = this.props;\n\n        if (!rows.length) {\n            return <p className=\"text-center\">No data</p>;\n        }\n    \n        const header = (\n            <thead>\n                <tr>\n                { cols.map((key, i) => (\n                    <th key={\"th-\" + i} title={ key }>{ key }</th>\n                )) }\n                </tr>\n            </thead>\n        );\n\n        const body = rows.map((rec, i) => (\n            <tr key={i} tabIndex={0}>\n                { rec.map((key, y) => (\n                    <td key={\"cell-\" + i + \"-\" + y}>{ key }</td>\n                )) }\n            </tr>\n        ));\n\n        return (\n            <div ref={ this.wrapper } className=\"data-grid-wrapper\">\n                <table className=\"table table-sm table-hover data-grid\">\n                    { header }\n                    <tbody>{ body }</tbody>\n                </table>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Chart.scss\";\n\nfunction getCoordinatesForPercent(percent) {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x * 100, y * 100];\n}\n\nexport default class Chart extends React.Component\n{\n    static propTypes = {\n        numerator  : PropTypes.number.isRequired,\n        denominator: PropTypes.number.isRequired,\n        duration   : PropTypes.number,\n        easing     : PropTypes.string\n    };\n\n    static defaultProps = {\n        duration: 1200,\n        easing  : \"easeInOutExpo\"\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { numerator: 0, denominator: 1 };\n    }\n\n    componentDidMount() {\n        this.setState({ animating: true }, () => {\n            window.jQuery({ numerator: 0, denominator: this.props.denominator }).animate(\n                {\n                    numerator  : this.props.numerator,\n                    denominator: this.props.denominator\n                },\n                {\n                    duration: this.props.duration,\n                    easing  : this.props.easing,\n                    step: (now, tween) => { if (!this._unmounted) this.setState({ [tween.prop]: now }) },\n                    complete: () => { if (!this._unmounted) this.setState({ animating: false }) }\n                }\n            );\n        });\n    }\n\n    componentDidUpdate() {\n        if (!this.state.animating && this.state.numerator !== this.props.numerator) {\n            this.setState({ animating: true }, () => {\n                window.jQuery({\n                    numerator: this.state.numerator,\n                    denominator: this.state.denominator\n                }).animate(\n                    {\n                        numerator  : this.props.numerator,\n                        denominator: this.props.denominator\n                    },\n                    {\n                        duration: this.props.duration,\n                        easing  : this.props.easing,\n                        step: (now, tween) => { if (!this._unmounted) this.setState({ [tween.prop]: now }) },\n                        complete: () => { if (!this._unmounted) this.setState({ animating: false }) }\n                    }\n                );\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true;\n    }\n\n    render() {\n        const percent = Math.max(Math.min(this.state.numerator / this.state.denominator * 100, 100), 0);\n        const largeArcFlag = percent >= 50 ? 1 : 0;\n        const [x, y] = getCoordinatesForPercent(percent / 100);\n        return (\n            <svg className=\"chart\" viewBox=\"-110 -110 220 220\">\n                <text className=\"chart-big-text\" y={0}>{Math.round(percent)}%</text>\n                {\n                    <text className=\"chart-small-text\" y={35}>\n                        {Math.round(this.state.numerator)}/{Math.round(this.state.denominator)}\n                    </text>\n                }\n                {\n                    percent === 0 ?\n                        <circle cx={0} cy={0} r={100} className=\"chart-arc-bg\"/> :\n                        <g style={{ transform: \"rotate(-0.25turn)\" }}>\n                            <path className=\"chart-arc-main\" d={`M 100 0 A 100 100 0 ${largeArcFlag} 1 ${x} ${y}`}/>\n                            <path className=\"chart-arc-bg\" d={`M ${x} ${y} A 100 100 0 ${largeArcFlag ? 0 : 1 } 1 100 0`}/>\n                        </g>\n                }\n            </svg>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Chart.scss\";\n\nfunction getCoordinatesForPercent(percent) {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x * 100, y * 100];\n}\n\nexport default class PROChart extends React.Component\n{\n    static propTypes = {\n        numerator  : PropTypes.number.isRequired,\n        denominator: PropTypes.number.isRequired,\n        duration   : PropTypes.number,\n        easing     : PropTypes.string\n    };\n\n    static defaultProps = {\n        duration: 1200,\n        easing  : \"easeInOutExpo\"\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { numerator: 0, denominator: 0 };\n    }\n\n    componentDidMount() {\n        this.setState({ animating: true }, () => {\n            window.jQuery({ numerator: 10, denominator: 0 }).animate(\n                {\n                    numerator  : this.props.numerator,\n                    denominator: this.props.denominator\n                },\n                {\n                    duration: this.props.duration,\n                    easing  : this.props.easing,\n                    step: (now, tween) => { if (!this._unmounted) this.setState({ [tween.prop]: Math.round(now) }) },\n                    complete: () => { if (!this._unmounted) this.setState({ animating: false }) }\n                }\n            );\n        });\n    }\n\n    componentDidUpdate() {\n        if (!this.state.animating && this.state.numerator !== this.props.numerator) {\n            this.setState({ animating: true }, () => {\n                window.jQuery({\n                    numerator: this.state.numerator,\n                    denominator: this.state.denominator\n                }).animate(\n                    {\n                        numerator  : this.props.numerator,\n                        denominator: this.props.denominator\n                    },\n                    {\n                        duration: 200,\n                        easing  : \"linear\",\n                        step: (now, tween) => { if (!this._unmounted) this.setState({ [tween.prop]: Math.round(now) }) },\n                        complete: () => { if (!this._unmounted) this.setState({ animating: false }) }\n                    }\n                );\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true;\n    }\n\n    render() {\n        const score = this.state.numerator;\n\n        const zones = [\n            { min: 10, max: 55, className: \"chart-arc-normal\"            },\n            { min: 55, max: 60, className: \"chart-arc-mild\"              },\n            { min: 60, max: 65, className: \"chart-arc-moderate\"          },\n            { min: 65, max: 70, className: \"chart-arc-moderately-severe\" },\n            { min: 70, max: 90, className: \"chart-arc-severe\"            }\n        ].map((section, i, all) => {\n            let startPct = section.min / 100;\n            let endPct   = section.max / 100;\n\n            if (i > 0) {\n                startPct += 0.0025;\n            }\n\n            if (i < all.length - 1) {\n                endPct -= 0.0025;\n            }\n\n            const [ startX, startY ] = getCoordinatesForPercent(startPct);\n            const [ endX  , endY   ] = getCoordinatesForPercent(endPct);\n\n            const largeArcFlag = endPct - startPct > 0.5 ? 1 : 0;\n\n            return (\n                <path\n                    className={ section.className }\n                    d={ `M ${startX} ${startY} A 100 100 0 ${largeArcFlag} 1 ${endX} ${endY}` }\n                    key={`zone-${i}`}\n                />\n            );\n        });\n\n        return (\n            <svg className=\"chart\" viewBox=\"-110 -110 220 220\">\n                <text className=\"chart-big-text\" y={0}>{score}</text>\n                <text className=\"chart-smaller-text\" y={25}>Average T-Score</text>\n                <text className=\"chart-smaller-text\" y={45}>from {this.state.denominator} patients</text>\n                <text className=\"chart-smaller-text\" y={105} x=\"-70\">Normal</text>\n                <text className=\"chart-smaller-text\" y={105} x=\"70\">Severe</text>\n                <g style={{ transform: \"rotate(0.25turn)\" }}>{ zones }</g>\n                <path fill=\"#000\" d={`M 0 0 l -10 -10 20 0 z`} style={{ transform: `rotate(${0.1 + (Math.max((score-10)/100, 0))}turn) translate(0, 87px)` }}/>\n            </svg>\n        );\n    }\n}\n","import React     from \"react\";\nimport moment    from \"moment\";\nimport PropTypes from \"prop-types\";\nimport Chart     from \"../Chart\";\nimport PROChart  from \"../Chart/PROChart\";\nimport                \"./ReportSummary.scss\";\n\nexport default class ReportSummary extends React.Component\n{\n    static propTypes = {\n        date                  : PropTypes.string.isRequired,\n        clinic                : PropTypes.string,\n        measureName           : PropTypes.string,\n        numeratorValue        : PropTypes.number,\n        denominatorValue      : PropTypes.number,\n        measureDescription    : PropTypes.string,\n        numeratorDescription  : PropTypes.string,\n        denominatorDescription: PropTypes.string,\n        measureId             : PropTypes.string\n    };\n\n    render()\n    {\n        const {\n            date,\n            clinic,\n            measureName,\n            numeratorValue,\n            denominatorValue,\n            measureDescription,\n            numeratorDescription,\n            denominatorDescription,\n            measureId\n        } = this.props;\n\n\n        return (\n            <div className=\"report-summary\">\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <div className=\"sub-title\">{ clinic }: { moment(date).format(\"MMMM YYYY\") }</div>\n                        <div className=\"title\">{ measureName }</div>\n                    </div>\n                    <div className=\"col\">\n                        {\n                            measureId === \"pro\" ?\n                            <PROChart numerator={ numeratorValue } denominator={ denominatorValue } /> :\n                            <Chart numerator={ numeratorValue } denominator={ denominatorValue } />\n                        }\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p className=\"sub-title\">POPULATION HEALTH IMPACT</p>\n                        <div dangerouslySetInnerHTML={{ __html: measureDescription }}></div>\n                        <br/>\n                    </div>\n                </div>\n                <br/>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p className=\"sub-title\">NUMERATOR</p>\n                        <p>{ numeratorDescription }</p>\n                    </div>\n                    <div className=\"col\">\n                        <p className=\"sub-title\">DENOMINATOR</p>\n                        <p>{ denominatorDescription }</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React               from \"react\";\nimport PropTypes           from \"prop-types\";\nimport { connect }         from \"react-redux\";\nimport { Route, NavLink }  from \"react-router-dom\";\nimport Sidebar             from \"../Sidebar\";\nimport SQLEditor           from \"../SQLEditor\";\nimport DataGrid            from \"../DataGrid\";\nimport ReportSummary       from \"../ReportSummary\";\nimport http                from \"../../http\";\nimport { setEditorHeight } from \"../../store/ui\";\n\nfunction formatDuration(ms) {\n    let out = [];\n    let meta = [\n        { label: \"week\"  , n: 1000 * 60 * 60 * 24 * 7 },\n        { label: \"day\"   , n: 1000 * 60 * 60 * 24     },\n        { label: \"hour\"  , n: 1000 * 60 * 60          },\n        { label: \"minute\", n: 1000 * 60               },\n        { label: \"second\", n: 1000                    },\n        { label: \"ms\"    , n: 1                       }\n    ];\n\n    meta.reduce((prev, cur) => {\n        let chunk = Math.floor(prev / cur.n);\n        if (chunk) {\n            out.push(`${chunk} ${cur.label}${chunk > 1 && cur.n > 1 ? \"s\" : \"\"}`);\n            return prev - chunk * cur.n;\n        }\n        return prev;\n    }, ms);\n\n    if (!out.length) {\n        out.push(`0 ${meta.pop().label}`);\n    }\n\n    if (out.length > 1) {\n        let last = out.pop();\n        out[out.length - 1] += \" and \" + last;\n    }\n\n    return out.join(\", \");\n}\n\nclass ReportPage extends React.Component\n{\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                id     : PropTypes.string,\n                date   : PropTypes.string,\n                measure: PropTypes.string,\n                org    : PropTypes.string\n            })\n        }),\n        location: PropTypes.object,\n        ui: PropTypes.shape({\n            sqlEditor: PropTypes.object\n        }),\n        dispatch: PropTypes.func.isRequired,\n        dataSources: PropTypes.object\n    };\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            loading: true,\n            error  : null,\n            data   : null\n        };\n\n        this.timer = null;\n    }\n\n    /**\n     * Starts a timer that is active while a query is running. When the query is\n     * complete (successful or not) the timer will destroy itself. This is used\n     * to measure the total time that it takes to execute a query and receive\n     * the result.\n     */\n    startClock() {\n        const start = Date.now();\n\n        const tick = () => {\n            if (this.state.prestoLoading) {\n                this.setState({\n                    queryTime: Date.now() - start\n                }, () => {\n                    this.timer = setTimeout(tick, 100);\n                });\n            } else {\n                this.timer = null;\n            }\n        };\n\n        tick();\n    }\n\n    /**\n     * Loads the report data\n     */\n    loadData()\n    {\n        const dsKeys = Object.keys(this.props.dataSources);\n        const query = new URLSearchParams(this.props.location.search);\n\n        if (dsKeys.length) {\n            query.delete(\"ds\");\n            dsKeys.forEach(key => {\n                if (this.props.dataSources[key].selected) {\n                    query.append(\"ds\", key);\n                }\n            });\n        }\n\n        this.setState({ loading: true }, () => {\n            http.request(`api/measure/result/report?${query}`).then(\n                data  => {\n                    this.setState({\n                        data: {\n                            ...data,\n                            measureId: query.get(\"measure\")\n                        },\n                        loading: false\n                    });\n                    if (data.cohort_sql) {\n                        this.runQuery(data.cohort_sql)\n                    }\n                },\n                error => this.setState({ error, loading: false })\n            );\n        });\n    }\n\n    /**\n     * Execute an SQL query and render the results in the grid\n     * @param {String} q The SQL to execute\n     */\n    runQuery(q)\n    {\n        this.setState({\n            prestoLoading: true,\n            queryTime: 0,\n            query: q\n        }, () => {\n            this.startClock();\n            http.query(q).then(\n                resp => {\n                    this.setState({\n                        prestoLoading: false,\n                        prestoError  : null,\n                        prestoData   : resp\n                    });\n                },\n                err => {\n                    this.setState({\n                        prestoLoading: false,\n                        prestoError  : err,\n                        prestoData   : null\n                    });\n                }\n            );\n        });\n    }\n\n    /**\n     * Fetch the report data after the first render\n     */\n    componentDidMount()\n    {\n        this.loadData();\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if (!this.state.loading) {\n\n            // Detect dataSource selection change\n            const prevDataSources = prevProps.dataSources || {};\n            for (const dsId in prevDataSources) {\n                const curDs = (this.props.dataSources || {})[dsId];\n                if (curDs.selected !== prevDataSources[dsId].selected) {\n                    return this.loadData();\n                }\n            }\n        }\n    }\n\n    renderEditor()\n    {\n        if (!this.state.data || !this.state.data.cohort_sql) {\n            return null;\n        }\n\n        const { queryTime, prestoLoading, prestoData, prestoError, query } = this.state;\n\n        return (\n            <>\n            <SQLEditor\n                query={ this.state.data.cohort_sql }\n                { ...this.props.ui.sqlEditor }\n                onHeightChange={ h => this.props.dispatch(setEditorHeight(h)) }\n                onQuery={ q => this.runQuery(q) }\n            />\n            {\n                queryTime ?\n                    <div className=\"float-right\" style={{ marginTop: \"-4em\", fontSize: 11, color: \"#999\", textAlign: \"right\" }}>\n                            Total time: { formatDuration(queryTime) }<br/>\n                        { !prestoLoading && prestoData ? \"Result rows: \" + prestoData.data.length : \"\" }\n                    </div> :\n                    null\n            }\n            <br/>\n            <div style={{ minHeight: 474 }}>\n            {\n                prestoLoading ?\n                    <div className=\"alert alert-info\">Loading...</div> :\n                    prestoError ?\n                        <div className=\"alert alert-danger\">{ prestoError.message }</div> :\n                        prestoData === undefined ?\n                            null :\n                            prestoData && prestoData.data && prestoData.data.length ?\n                                <DataGrid data={ prestoData } query={query}/> :\n                                <div className=\"alert alert-info\">No data to display</div>\n            }\n            </div>\n            </>\n        );\n    }\n\n    createSummaryRenderer()\n    {\n        if (!this.state.data) return null;\n\n        return (\n            <ReportSummary\n                clinic=\"All Clinics\"\n                date={ this.state.data.measureDate }\n                measureId={ this.state.data.measureId }\n                measureName={ this.state.data.measureName }\n                startValue={ this.state.numeratorValue }\n                numeratorValue={ this.state.data.numeratorValue }\n                denominatorValue={ this.state.data.denominatorValue }\n                measureDescription={ this.state.data.measureDescription || \"No description available for this measure\" }\n                numeratorDescription={ this.state.data.numeratorDescription || \"No description available for the numerator of this measure\"   }\n                denominatorDescription={ this.state.data.denominatorDescription || \"No description available for the denominator of this measure\" }\n            />\n        );\n    }\n\n    render()\n    {\n        const { error } = this.state;\n\n        if ( error ) {\n            console.error(error);\n            return <b>{ error.message }</b>;\n        }\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <Sidebar disableOrganizations/>\n                    <div className=\"col-9\">\n                        <div className=\"row\">\n                            <div className=\"col-6 align-middle\">\n                                <h3 style={{ lineHeight: \"43px\", margin: 0 }}>\n                                    <Route path=\"/report\" exact render={() => \"Month Report\" }/>\n                                    <Route path=\"/report/editor\" render={() => \"Cohort Builder\"} />\n                                </h3>\n                            </div>\n                            <div className=\"col-6 text-right\">\n                                <div className=\"btn-group view-toggle\" role=\"group\">\n                                    <NavLink className=\"btn btn-brand\" to={{\n                                        pathname: \"/report\",\n                                        search  : this.props.location.search\n                                    }} exact>REPORT</NavLink>\n                                    <NavLink className=\"btn btn-brand\" to={{\n                                        pathname: \"/report/editor\",\n                                        search  : this.props.location.search\n                                    }} exact>BUILDER</NavLink>\n                                </div>\n                            </div>\n                        </div>\n                        <br/>\n                        <Route path=\"/report\"        exact render={() => this.createSummaryRenderer()}/>\n                        <Route path=\"/report/editor\" exact render={() => this.renderEditor()} />\n                        <br/>\n                        <br/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        ui: state.ui,\n        dataSources: state.dataSources\n    })\n)(ReportPage);\n","import React             from \"react\";\nimport PropTypes         from \"prop-types\";\nimport moment            from \"moment\";\nimport { connect }       from \"react-redux\";\nimport { Link }          from \"react-router-dom\";\nimport config            from \"../../config\";\nimport                        \"./TimelineGrid.scss\";\n\n\nexport class TimelineGrid extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * The data to be rendered within the grid. Contains `description`,\n         * `name` a `measures[]` array to hold the measure results.\n         */\n        data: PropTypes.object,\n\n        /**\n         * Pass the clicked measure up to the parent component where the\n         * selection is being managed.\n         */\n        onRowClick: PropTypes.func,\n\n        /**\n         * Tell the TimelineGrid which is the selected organization ID.\n         * Rows that apply to that ID and to @selectedMeasureId will be\n         * rendered as selected.\n         */\n        selectedOrgId: PropTypes.string,\n\n        /**\n         * Tell the TimelineGrid which is the selected measure ID.\n         * Rows that apply to that ID and to @selectedOrgId will be\n         * rendered as selected.\n         */\n        selectedMeasureId: PropTypes.string,\n\n        /**\n         * The ID of the organization that this grid is about. This can be the\n         * same as @selectedOrgId if there is a selection within that org, or\n         * it can be different, n which case we render table that has no\n         * selected row.\n         */\n        orgId: PropTypes.string,\n\n        /**\n         * The organization that is being rendered.\n         */\n        org: PropTypes.object,\n\n        /**\n         * The dataSources included in this grid\n         */\n        dataSources: PropTypes.object,\n\n        startYear: PropTypes.number\n    };\n\n    static defaultProps = {\n        data: {},\n        startYear: config.startYear\n    };\n\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n        const { description, name, measures } = this.props.data;\n\n        const headerLabels = [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ];\n\n        const bodyRows = [];\n        const now = moment(config.startYear + 1 + \"-01-01\", \"YYYY-MM-DD\");\n\n        // loop over each measure\n        measures.forEach(measure => {\n\n            const cells = [];\n            let i = 0;\n            for (let date in measure.data) {\n\n                const entry      = measure.data[date];\n                const dateObject = moment(date);\n\n                let title = dateObject.format(\"MMM YYYY\");\n                let value;\n\n                if (measure.id === \"pro\") {\n                    title += ` - Average T-Score of ${entry.numerator} from ${entry.denominator} patients`;\n                    value = entry.numerator;\n                }\n                else {\n                    title += ` - ${entry.numerator} of ${entry.denominator} patients`;\n                    value = Math.round(entry.pct);\n                }\n \n                const query = new URLSearchParams();\n                query.set(\"date\", dateObject.format(\"YYYY-MM-DD\"));\n                query.set(\"measure\", measure.id);\n                query.set(\"org\", this.props.org.value);\n                Object.keys(this.props.dataSources).forEach(key => {\n                    if (this.props.dataSources[key].selected) {\n                        query.append(\"ds\", key);\n                    }\n                });\n\n                // Values from the current year \"overlap\" the values from the\n                // last year. We can compare them and show trends\n                if (dateObject.isSame(now, \"year\")) {\n                    cells[i % 12] = (\n                        <td key={date} title={title}>\n                            <Link to={`/report?${query}`}>{ value }</Link>\n                        </td>\n                    );\n                }\n\n                // Values from the previous year that do not yet have new data\n                // for the current year\n                else {\n                    const newDate = moment(dateObject).add(1, \"year\").format(\"YYYY-MM\");\n                    if (!measure.data[newDate]) {\n                        cells[i % 12] = (\n                            <td key={date} title={title}>\n                                <Link to={`/report?${query}`} className=\"text-muted\">{ value }</Link>\n                            </td>\n                        );\n                    }\n                }\n                i++;\n            }\n\n            if (!cells.length) {\n                cells.push(\n                    <td key=\"empty-1\">-</td>,\n                    <td key=\"empty-2\">-</td>,\n                    <td key=\"empty-3\">-</td>,\n                    <td key=\"empty-4\">-</td>,\n                    <td key=\"empty-5\">-</td>,\n                    <td key=\"empty-6\">-</td>,\n                    <td key=\"empty-7\">-</td>,\n                    <td key=\"empty-8\">-</td>,\n                    <td key=\"empty-9\">-</td>,\n                    <td key=\"empty-10\">-</td>,\n                    <td key=\"empty-11\">-</td>,\n                    <td key=\"empty-12\">-</td>\n                );\n            }\n\n            bodyRows.push(\n                <tr\n                    key={ name + \"-\" + measure.name }\n                    className={\n                        (this.props.selectedOrgId === this.props.orgId &&\n                         this.props.selectedMeasureId === measure.id) ? \"selected\" : \"\" }\n                    onClick={\n                        e => {\n                            // @ts-ignore\n                            if (e.target.nodeName !== \"A\") {\n                                this.props.onRowClick(measure);\n                            }\n                        }\n                    }\n                >\n                    <th>{ measure.name } ({ measure.id === \"pro\" ? \"T-Score\" : \"%\"})</th>\n                    { cells }\n                </tr>\n            );\n        });\n\n        const header = (\n            <thead>\n                <tr>\n                    <th></th>\n                    { headerLabels.map((label, i) => (\n                        <th key={\"th-\" + i}>{ label }</th>\n                    )) }\n                </tr>\n            </thead>\n        );\n\n        return (\n            <div>\n                <h4>{ description }</h4>\n                <div className=\"table-responsive\">\n                    <table className=\"table table-sm table-hover timeline-grid\">\n                        { header }\n                        <tbody>{ bodyRows }</tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        dataSources: state.dataSources,\n    })\n)(TimelineGrid);\n","import React     from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment    from \"moment\";\nimport                \"./LineChart.scss\";\n\nconst Highcharts = window.Highcharts;\n\nexport default class LineChart extends React.Component\n{\n    static propTypes = {\n        chartOptions: PropTypes.object\n    };\n\n    componentDidMount() {\n        const fontFamily = \"-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",\" +\n            \"Roboto,\\\"Helvetica Neue\\\",Arial,sans-serif,\\\"Apple Color Emoji\\\"\" +\n            \",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\"\";\n\n        this.chart = window.Highcharts.chart(\"container\", {\n            chart: {\n                type               : \"spline\",\n                plotBackgroundColor: \"#F6F6F6\",\n                plotBorderColor    : \"#DDD\",\n                plotBorderWidth    : 1,\n                zoomType: \"x\"\n            },\n            title: {\n                align: \"center\",\n                style: {\n                    fontFamily,\n                    // fontSize  : \"1.5rem\",\n                    fontSize  : \"calc(8px + 1vw)\",\n                    fontWeight: 500\n                },\n                useHTML: true\n            },\n            subtitle: {\n                align: \"center\",\n                useHTML: true,\n                style: {\n                    fontFamily,\n                    fontSize  : \"1rem\",\n                    fontWeight: 300\n                }\n            },\n            xAxis: [\n                {\n                    lineWidth : 0,\n                    crosshair : true,\n                    type      : \"category\",\n                    id        : \"year_axis\",\n                    showEmpty : false,\n                    categories: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ],\n                    title: {\n                        text: null\n                    }\n                },\n                {\n                    lineWidth : 0,\n                    id        : \"monthAxis\",\n                    crosshair : true,\n                    type      : \"datetime\",\n                    minorTicks: true,\n                    showEmpty : false,\n                    zoomEnabled: true,\n                    min       : +moment().utc().startOf(\"month\"),\n                    max       : +moment().utc().endOf(\"month\").startOf(\"day\"),\n                    dateTimeLabelFormats: {\n                        day: \"%e\"\n                    },\n                    title: {\n                        text: null\n                    }\n                }\n            ],\n            yAxis: {\n                id: \"pct_axis\",\n                title: {\n                    text: \"% Patients\",\n                    style: {\n                        fontFamily,\n                        fontSize  : \"1rem\",\n                        fontWeight: 500\n                    }\n                },\n                lineColor   : \"#CCC\",\n                tickInterval: 25,\n                min         : 0,\n                max         : 100,\n                lineWidth   : 0\n            },\n            tooltip: {\n                crossHairs   : true,\n                shared       : true,\n                useHTML      : true,\n                headerFormat : \"<b>{point.key}</b><hr style=\\\"margin: 2px 0\\\"/><table>\",\n                pointFormat  : \"<tr><td style=\\\"color: {series.color}; text-align: right\\\">{series.name}: </td>\" +\n                    \"<td style=\\\"text-align: right\\\"><b>&nbsp;{point.y} %</b></td></tr>\",\n                footerFormat : \"</table>\",\n                valueDecimals: 2\n            },\n            plotOptions: {\n                spline: {\n                    lineWidth: 3,\n                    states: {\n                        hover: {\n                            lineWidth: 4\n                        }\n                    },\n                    marker: {\n                        enabled: false\n                    }\n                }\n            },\n            series: [\n                {\n                    name  : \"Current Year\",\n                    id    : \"current_year\",\n                    color : \"#4a90e2\",\n                    type  : \"areaspline\",\n                    xAxis : \"year_axis\",\n                    shadow: true,\n                    fillColor: {\n                        linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n                        stops: [\n                            [\n                                0,\n                                Highcharts.color(\"#4a90e2\").setOpacity(0.35).get()\n                            ],\n                            [\n                                1,\n                                Highcharts.color(\"#4a90e2\").setOpacity(0).get()\n                            ]\n                        ]\n                    },\n                    marker: {\n                        enabled: false\n                    }\n                },\n                {\n                    name     : \"Previous Year\",\n                    id       : \"previous_year\",\n                    color    : \"#555\",\n                    dashStyle: \"ShortDot\",\n                    xAxis    : \"year_axis\",\n                    lineWidth: 2\n                }\n            ],\n            navigation: {\n                menuItemStyle: {\n                    fontSize: \"10px\"\n                }\n            },\n            legend: {\n                align        : \"left\",\n                verticalAlign: \"top\",\n                layout       : \"horizontal\",\n                floating     : true,\n                x            : 60,\n                y            : 64\n            },\n        });\n\n        this.chart.update(this.props.chartOptions, true, true, false);\n    }\n\n    componentDidUpdate() {\n        this.chart.drillUp();\n        this.chart.update(this.props.chartOptions, true, true);\n    }\n\n    render() {\n        return <div id=\"container\"/>;\n    }\n}\n","import React             from \"react\";\nimport PropTypes         from \"prop-types\";\nimport { connect }       from \"react-redux\";\nimport moment            from \"moment\";\nimport config            from \"../../config\";\nimport Sidebar           from \"../Sidebar\";\nimport TimelineGrid      from \"../TimelineGrid\";\nimport LineChart         from \"../LineChart\";\nimport { queryMeasures } from \"../../store/measureResults\";\n\n\nclass MeasuresPage extends React.Component\n{\n    static propTypes = {\n\n        /**\n         * The dispatch function is passed internally\n         */\n        dispatch: PropTypes.func.isRequired,\n\n        /**\n         * True if the measure results are currently being loaded\n         */\n        loading: PropTypes.bool,\n\n        /**\n         * The measure results data object (if available)\n         */\n        data: PropTypes.object,\n\n        /**\n         * Any error occurred while loading the measure results data\n         */\n        error: PropTypes.instanceOf(Error),\n\n        organizations: PropTypes.array,\n\n        payers: PropTypes.array,\n\n        measures: PropTypes.object,\n\n        dataSources: PropTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chart: {},\n            selection: {}\n        };\n\n        this.onRowClick = this.onRowClick.bind(this);\n    }\n\n    loadDataIfNeeded(prevProps) {\n\n        // Skip if currently loading\n        if (this.props.loading) {\n            return false;\n        }\n\n        // Skip if organizations are not loaded yet\n        if (!this.props.organizations.length) {\n            return false;\n        }\n\n        // Skip if payers are not loaded yet\n        if (!this.props.payers.length) {\n            return false;\n        }\n\n        // Skip if measures are not loaded yet\n        if (!Object.keys(this.props.measures).length) {\n            return false;\n        }\n\n        // Skip if dataSources are not loaded yet\n        if (!Object.keys(this.props.dataSources).length) {\n            return false;\n        }\n\n        // Load if no data has been loaded yet\n        if (!this.props.data) {\n            return this.props.dispatch(queryMeasures());\n        }\n\n        // Detect state changes\n        if (prevProps) {\n\n            // Detect dataSource changes\n            for (const id in prevProps.dataSources) {\n                const ds  = prevProps.dataSources[id];\n                const cur = this.props.dataSources[id];\n                if (cur.selected !== ds.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n\n            // Detect payer changes\n            for (const ds of prevProps.payers) {\n                const cur = this.props.payers.find(o => o.value === ds.value);\n                if (cur.selected !== ds.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n\n            // Detect organization changes\n            for (const org of prevProps.organizations) {\n                const cur = this.props.organizations.find(o => o.value === org.value);\n                if (cur.selected !== org.selected) {\n                    return this.props.dispatch(queryMeasures());\n                }\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        this.loadDataIfNeeded(prevProps);\n    }\n\n    componentDidMount()\n    {\n        this.loadDataIfNeeded();\n    }\n\n    getSelection() {\n        let { orgId, measureId } = this.state.selection;\n\n        if (!orgId) {\n            orgId = Object.keys(this.props.data.organizations).shift();\n        }\n\n        let org = this.props.data.organizations[orgId];\n\n        if (!org) {\n            orgId = Object.keys(this.props.data.organizations).shift();\n            org = this.props.data.organizations[orgId];\n        }\n\n        let measure;\n\n        if (!measureId) {\n            measure = org.measures[0];\n        } else {\n            measure = org.measures.find(o => o.id === measureId);\n        }\n\n        return { orgId, org, measure };\n    }\n\n    getChartOptions(orgData, measure) {\n        const options = {\n            title: {\n                text: measure.name\n            },\n            subtitle: {\n                text: orgData.description\n            },\n            series: [\n                {\n                    data : [],\n                    id   : \"current_year\",\n                    name : config.startYear + 1,\n                    xAxis: \"year_axis\"\n                },\n                {\n                    data : [],\n                    id   : \"previous_year\",\n                    name : config.startYear,\n                    xAxis: \"year_axis\"\n                }\n            ],\n            yAxis: {\n                title: {\n                    text: \"% Patients\"\n                }\n            }\n        };\n\n        if (measure.id === \"pro\") {\n            Object.keys(measure.data).forEach(key => {\n                const [ year, month ] = key.split(\"-\");\n                const rec = measure.data[key];\n                const point = {\n                    x: parseInt(month, 10) - 1,\n                    y: rec.numerator,\n                    name : moment(key).format(\"MMMM\"),\n                    xAxis: 0\n                };\n                if (year === String(config.startYear + 1)) {\n                    options.series[0].data.push(point);\n                }\n                else if (year === String(config.startYear)) {\n                    options.series[1].data.push(point);\n                }\n            });\n\n            options.tooltip = {\n                headerFormat : \"<b>{point.key} - Average T-Score</b><hr style=\\\"margin: 2px 0\\\"/><table>\",\n                pointFormat  : \"<tr><td style=\\\"color: {series.color}; text-align: right\\\">{series.name}: </td>\" +\n                    \"<td style=\\\"text-align: right\\\"><b>&nbsp;{point.y}</b></td></tr>\",\n                valueDecimals: 0\n            };\n\n            options.yAxis.title.text = \"Avg. T-Score\";\n        }\n        else {\n            Object.keys(measure.data).forEach(key => {\n                const [ year, month ] = key.split(\"-\");\n                const rec = measure.data[key];\n                const point = {\n                    x: parseInt(month, 10) - 1,\n                    y: rec.pct,\n                    name : moment(key).format(\"MMMM\"),\n                    xAxis: 0\n                };\n                if (year === String(config.startYear + 1)) {\n                    options.series[0].data.push(point);\n                }\n                else if (year === String(config.startYear)) {\n                    options.series[1].data.push(point);\n                }\n            });\n        }\n\n        return options;\n    }\n\n    // Event Handlers ----------------------------------------------------------\n    onRowClick(orgId, measure)\n    {\n        this.setState({\n            selection: {\n                orgId,\n                measureId: measure.id\n            }\n        });\n    }\n\n    // Rendering methods -------------------------------------------------------\n    renderStage()\n    {\n        const { error, loading, data } = this.props;\n\n        if (loading) {\n            return <p style={{ textAlign: \"center\" }}>Loading...</p>;\n        }\n\n        if (error) {\n            return <pre>{ error.stack }</pre>;\n        }\n\n        if (!data) {\n            return <p style={{ textAlign: \"center\" }}>No data to display</p>;\n        }\n\n        let { orgId, org, measure } = this.getSelection();\n\n        const reports = [];\n        for (let id in data.organizations) {\n            const org = this.props.organizations.find(o => o.value === id);\n            const orgData = data.organizations[id];\n            if (!org.selected) continue;\n            reports.push(\n                <TimelineGrid\n                    key={ \"timeline-\" + id }\n                    data={ orgData }\n                    org={ org }\n                    orgId={ id }\n                    onRowClick={ msr => this.onRowClick(id, msr) }\n                    selectedOrgId={ orgId }\n                    selectedMeasureId={ measure.id }\n                />\n            );\n        }\n\n        return (\n            <>\n                <LineChart key=\"line-chart\" chartOptions={ this.getChartOptions(org, measure) }/>\n                { reports }\n            </>\n        );\n    }\n\n    render()\n    {\n        return (\n            <div className=\"row\">\n                <Sidebar/>\n                <div className=\"col-9\">\n                    { this.renderStage() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        organizations: Object.keys(state.organizations).map(id => ({\n            value      : id,\n            label      : state.organizations[id].name,\n            selected   : state.organizations[id].enabled,\n            description: state.organizations[id].description\n        })),\n        payers: Object.keys(state.payers).map(id => ({\n            value   : id,\n            label   : state.payers[id].label,\n            selected: state.payers[id].selected\n        })),\n        measures   : state.measures,\n        dataSources: state.dataSources,\n        data       : state.measureResults.data,\n        loading    : state.measureResults.loading,\n        error      : state.measureResults.error\n    })\n)(MeasuresPage);\n","import React        from \"react\";\nimport PropTypes    from \"prop-types\";\nimport { connect }  from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport logo         from \"./logo.svg\";\nimport { login }    from \"../../store/auth\";\n\nclass LoginPage extends React.Component\n{\n    static propTypes = {\n        error      : PropTypes.oneOfType([PropTypes.instanceOf(Error), PropTypes.string]),\n        loading    : PropTypes.bool,\n        login      : PropTypes.func.isRequired,\n        currentUser: PropTypes.object\n    };\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            email   : \"user@aco.org\",\n            password: \"password\"\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onSubmit(e)\n    {\n        e.preventDefault();\n        this.props.login(this.state.email, this.state.password);\n    }\n\n    onChange(e)\n    {\n        this.setState({ [e.target.name ]: e.target.value });\n    }\n\n    render()\n    {\n        let { from } = this.props.location.state || { from: { pathname: \"/measures\" } };\n        if (!from || !from.pathname || from.pathname === \"/\") {\n            from = { pathname: \"/measures\" }\n        }\n\n        if (this.props.currentUser) {\n            return <Redirect to={from} push />\n        }\n\n        return (\n            <div className=\"row\">\n                <form className=\"mx-auto col-xs-12 col-sm-8 col-md-6 col-lg-4\"\n                    onSubmit={ this.onSubmit }>\n                    { this.props.error && (\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            { String(this.props.error) }\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email1\">Email address</label>\n                        <input\n                            type=\"email\"\n                            className=\"form-control\"\n                            id=\"email1\"\n                            placeholder=\"Enter email\"\n                            name=\"email\"\n                            value={ this.state.email }\n                            onChange={ this.onChange }\n                            disabled={ this.props.loading }\n                        />\n                        <small className=\"form-text text-muted\">Enter \"user@aco.org\" or \"user@payer.org\"</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password1\">Password</label>\n                        <input\n                            type=\"password\"\n                            className=\"form-control\"\n                            id=\"password1\"\n                            placeholder=\"Password\"\n                            name=\"password\"\n                            value={ this.state.password }\n                            onChange={ this.onChange }\n                            disabled={ this.props.loading }\n                        />\n                        <small className=\"form-text text-muted\">The default password is \"password\"</small>\n                    </div>\n                    <br/>\n                    <button\n                        disabled={ this.props.loading }\n                        type=\"submit\"\n                        className=\"btn btn-block btn-brand active\"\n                    >\n                        { this.props.loading && <i className=\"fas fa-spinner fa-spin\"/> } Login\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className=\"text-center\">\n                        <img src={logo} alt=\"BCH Logo\" width=\"150\"/>\n                    </p>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => state.auth,\n    dispatch => ({\n        // @ts-ignore\n        login: (email, pass) => dispatch(login(email, pass))\n    })\n)(LoginPage);\n","import React               from \"react\";\nimport { BrowserRouter }   from \"react-router-dom\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect }         from \"react-redux\";\nimport PropTypes           from \"prop-types\";\nimport Header              from \"../Header\";\nimport ReportPage          from \"../ReportPage\";\nimport MeasuresPage        from \"../MeasuresPage\";\nimport LoginPage           from \"../LoginPage\";\nimport                          \"./App.scss\";\n\nclass PrivateRoute extends React.Component\n{\n    static propTypes = {\n        user: PropTypes.object,\n        component: PropTypes.any\n    };\n\n    render() {\n        const { user, component: Component, ...rest } = this.props;\n        return (\n            <Route {...rest} render={ props => (\n                user ?\n                    <Component {...props} /> :\n                    <Redirect to={{\n                        pathname: \"/login\",\n                        state: { from: props.location }\n                    }} />\n            ) } />\n        );\n    }\n}\n\nfunction CPR(props) {\n    const Component = connect(state => ({\n        ...props,\n        user: state.auth.currentUser\n    }))(PrivateRoute);\n\n    return <Component {...props}/>;\n}\n\nclass App extends React.Component\n{\n    static propTypes = {\n        user: PropTypes.object,\n        loading: PropTypes.bool,\n        dispatch: PropTypes.func\n    };\n\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Header\n                        user={ this.props.user }\n                        loading={ this.props.loading }\n                        dispatch={ this.props.dispatch }\n                    />\n                    <div className=\"container\" style={{ marginTop: 30 }}>\n                        <CPR path=\"/\"           component={ReportPage} exact />\n                        <CPR path=\"/report\"     component={ReportPage} />\n                        <CPR path=\"/measures\"   component={MeasuresPage} />\n                        <Route path=\"/login\"    component={LoginPage} />\n                    </div>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default connect(state => ({\n    user: state.auth.currentUser,\n    loading: state.auth.loading\n}))(App);\n","import React             from \"react\";\nimport { Provider }      from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store             from \"./store\";\nimport App               from \"./components/App\";\n\n\nexport default class Root extends React.Component\n{\n    render() {\n        return (\n            <BrowserRouter>\n                <Provider store={ store }>\n                    <App/>\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n\n","import React    from 'react';\nimport ReactDOM from 'react-dom';\nimport App      from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}